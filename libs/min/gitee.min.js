define(["axios","base64","utils","sysLog"],(function(axios,base64,utils,sysLog){const pubRepo="webdata",meRepo="webme",storageKey={lsRepo:"gitee-repo",lsLoginState:"wyd-login-state",lsFileTree:"file-Tree"};let lsRepo=localStorage.getItem(storageKey.lsRepo),apiConfig={client_id:"f5250ed1c6f0a51423ca06aa4faf5c10d64ce8b411c425256d22fec16a531665",client_secret:"00a0f31357ce04fe3619eab7149d7c1b4daade23677a898b8f14bb647bc25fb3",reposUrlPrefix:"https://gitee.com/api/v5/repos/yanhui1993",repo:lsRepo||pubRepo},wydConfig={},state={loginState:{},fileShaMap:new Map},access_token;async function getFileTree(refresh=!1,repo=pubRepo){return new Promise((resolve,reject)=>{let cache=getLocalData(storageKey.lsFileTree,!0,repo);!cache||refresh?axios.get(`${apiConfig.reposUrlPrefix}/${repo}/git/trees/master?${access_token?"access_token="+access_token:""}&recursive=1`).then(data=>{saveLocalData(storageKey.lsFileTree,data.tree,repo),fileShaMapInit(!1,repo),resolve(data.tree),sysLog.addLog(`[${repo}]获取仓库文件树`)}).catch(err=>{reject(err)}):resolve(cache)})}async function getFileContent(filePath,refresh=!1,parseJson=!1,repo=pubRepo){let cacheKey=`@${filePath}`,cache,localMdfCache=getLocalData(cacheKey,!1,repo);if(cache=localMdfCache||getLocalData(filePath,!1,repo),!refresh&&cache)return parseJson?JSON.parse(cache):cache;let data=await axios.get(`${apiConfig.reposUrlPrefix}/${repo}/contents/${filePath}?${access_token?"access_token="+access_token:""}`);if(!data.content)return utils.message(`获取文件内容失败! [${filePath}]`,"error"),null;let content=base64.decode(data.content);return delLocalData(cacheKey,repo),saveLocalData(filePath,content,repo),sysLog.addLog(`[${repo}]下载文件 ${filePath}`),parseJson?JSON.parse(content):content}async function newFile(filePath,content,repo=pubRepo){if(!filePath||!content)return null;let data=base64.encode(content);return new Promise(resolve=>{axios.post(`${apiConfig.reposUrlPrefix}/${repo}/contents/${filePath}`,{access_token:access_token,content:data,message:`open api new ${window.location.pathname}`}).then(async data=>{utils.notify("新增成功！","success"),await fileShaMapInit(!0,repo),resolve(data),sysLog.addLog(`[${repo}]新增文件 ${filePath}`)}).catch(err=>{console.error(err),utils.notify("新增异常！","error")})})}async function updateFile(filePath,content,repo=pubRepo,refreshFileTree=!0){let sha=state.fileShaMap.get(`${repo}#${filePath}`);if(!sha)return utils.notify(`未匹配文件 ${repo}#${filePath}`,"warning"),null;let data=base64.encode(content);return new Promise(resolve=>{axios.put(`${apiConfig.reposUrlPrefix}/${repo}/contents/${filePath}`,{access_token:access_token,content:data,sha:sha,message:`open api update ${window.location.pathname}`}).then(async()=>{utils.notify(`上传[${filePath}]成功！`,"success"),delLocalData(filePath,repo),saveLocalData(filePath,base64.decode(data),repo),refreshFileTree&&await fileShaMapInit(!0,repo),resolve(),sysLog.addLog(`[${repo}]上传文件 ${filePath}`)}).catch(err=>{console.error(err),utils.notify("上传异常！","error")})})}function updateFileCache(filePath,content,repo=pubRepo){let sha;if(!state.fileShaMap.get(`${repo}#${filePath}`))return utils.notify(`未匹配文件 ${repo}#${filePath}`,"warning"),null;saveLocalData(`@${filePath}`,content,repo),utils.notify(`更新[${filePath}]成功！`,"success")}async function deleteFile(filePath,repo=pubRepo){let sha=state.fileShaMap.get(`${repo}#${filePath}`);return sha?new Promise(resolve=>{axios.delete(`${apiConfig.reposUrlPrefix}/${repo}/contents/${filePath}`,{params:{access_token:access_token,sha:sha,message:`open api delete ${window.location.pathname}`}}).then(async()=>{utils.notify(`删除[${filePath}]成功！`,"success"),delLocalData(filePath,repo),await fileShaMapInit(!0,repo),resolve(),sysLog.addLog(`[${repo}]删除文件 ${filePath}`)}).catch(err=>{console.error(err),utils.notify("删除异常！","error")})}):(utils.notify(`未匹配文件 ${repo}#${filePath}`,"warning"),null)}function saveLocalData(key,data,repo=pubRepo){"object"==typeof data?localStorage.setItem(`${repo}#${key}`,JSON.stringify(data)):localStorage.setItem(`${repo}#${key}`,data)}function getLocalData(key,isObject=!0,repo=pubRepo){let storage=localStorage.getItem(`${repo}#${key}`);return storage?isObject?JSON.parse(storage):storage:null}function delLocalData(key,repo=pubRepo){localStorage.removeItem(`${repo}#${key}`),localStorage.removeItem(`${repo}#@${key}`)}async function initState(){return new Promise(async(resolve,reject)=>{loginStateInit(),getFileContent("config/wyd2021.json",!1,!0).then(data=>{wydConfig=data}).catch(e=>{console.log("加载配置异常")}),fileShaMapInit(!1,apiConfig.repo).then(()=>{console.log("数据初始化完成！"),resolve()}).catch(err=>{console.warn("数据初始化异常！",err),utils.goLogin(),resolve()})})}function loginStateInit(){let loginStorageData=localStorage.getItem(storageKey.lsLoginState);loginStorageData&&(state.loginState=JSON.parse(loginStorageData),access_token=state.loginState.access_token)}async function fileShaMapInit(refresh=!1,repo){return new Promise((resolve,reject)=>{if(!repo)return console.warn("仓库不能为空"),null;getFileTree(refresh,repo).then(fileData=>{for(let file of fileData)state.fileShaMap.set(`${apiConfig.repo}#${file.path}`,file.sha);resolve()}).catch(error=>{reject(error)})})}function clearAllCache(){for(let key in localStorage)localStorage.hasOwnProperty(key)&&key&&!key.startsWith("wyd-")&&localStorage.removeItem(key)}function setRepo(repo){apiConfig.repo=repo,localStorage.setItem(storageKey.lsRepo,repo),utils.message(`切换数据源[${repo}]成功！`)}function getRepo(){return apiConfig.repo}function getWydConfig(){return wydConfig}function refreshToken(call){let loginStorageData=localStorage.getItem(storageKey.lsLoginState);if(loginStorageData){let loginState=JSON.parse(loginStorageData),{created_at:created_at,expires_in:expires_in,refresh_token:refresh_token}=loginState;Math.floor(Date.now()/1e3)-created_at>expires_in?axios.post(`https://gitee.com/oauth/token?grant_type=refresh_token&refresh_token=${refresh_token}`).then(data=>{localStorage.setItem(storageKey.lsLoginState,JSON.stringify(data)),initState().then(()=>{call&&call(data)})}):call&&call(loginState)}}return{getFileTree:getFileTree,getFileContent:getFileContent,newFile:newFile,updateFile:updateFile,deleteFile:deleteFile,initState:initState,clearAllCache:clearAllCache,setRepo:setRepo,getRepo:getRepo,storageKey:storageKey,apiConfig:apiConfig,getWydConfig:getWydConfig,updateFileCache:updateFileCache,refreshToken:refreshToken}}));