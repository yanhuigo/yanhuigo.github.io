{"meta":{"title":"颜辉 ☆ JCoder","subtitle":"愿你成为自己喜欢的模样，不抱怨，不将就，有自由，有光芒。 <br /> 人生若只如初见，何事秋风悲画扇。","description":"","author":"颜辉","url":"http://yanhui2018.gitee.io","root":"/note/"},"pages":[{"title":"categories","date":"2020-04-18T05:55:35.000Z","updated":"2020-05-10T13:52:53.802Z","comments":false,"path":"categories/index.html","permalink":"http://yanhui2018.gitee.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-18T05:55:03.000Z","updated":"2020-05-10T14:17:16.280Z","comments":false,"path":"tags/index.html","permalink":"http://yanhui2018.gitee.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SonarLint代码检查问题总结","slug":"java/SonarLint代码检查问题总结","date":"2020-05-27T08:54:05.533Z","updated":"2020-05-27T08:54:05.533Z","comments":true,"path":"2020/05/27/java/SonarLint代码检查问题总结/","link":"","permalink":"http://yanhui2018.gitee.io/2020/05/27/java/SonarLint%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/","excerpt":"","text":"IDEA安装sonar lint image-20200526110544840 执行检查 检查指定包下的问题，选中包，右键选择 SonarLint-&gt;Analyze with SonarLint（快捷键：Ctrl+Shift+S），分析完成后即可在SonarLint面板上看到问题列表 image-20200526110753666 检查单个文件类的问题，在打开文件窗口右键选择Analyze with SonarLint image-20200526111022430 常见问题弱类型 在有定义泛型的类和方法时，没有传类型 Raw types should not be used Generic types shouldn&#39;t be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking, and defers the catch of unsafe code to runtime.泛型对象定义方式不对 使用了错误的方式定义泛型，导致无法正确推倒泛型 错误方式，引用的参数类型一定要加，不然无法推断类型，构造对象的地方可以不加，使用new BaseResponse&lt;&gt;()即可 image-20200526141230418 正确方式 image-20200526141359450 资源对象没关闭 在使用完资源对象（实现了Closeable接口）后没有关闭 Resources should be closed Connections, streams, files, and other classes that implement the Closeable interface or its super-interface, AutoCloseable, needs to be closed after use. Further, that close call must be made in a finally block otherwise an exception could keep the call from being made. Preferably, when class implements AutoCloseable, resource should be created using &quot;try-with-resources&quot; pattern and will be closed automatically. Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it&#39;s on to their knees. JDK1.7后可使用 try(初始化资源对象){...}catch(){...}语法自动关闭资源 try( // 资源对象 FileWriter fw = new FileWriter(&quot;aa.txt&quot;) ) { fw.write(&quot;bbbbbbbbbbbbbb&quot;); } catch(Exception ex) { ex.printStackTrace(); } 未使用字符串常量 对多次重复出现的字符串没有统一定义常量 String literals should not be duplicated Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences. On the other hand, constants can be referenced from many places, but only need to be updated in a single place.未使用非同步替代类 在不需要保证同步和线程安全的情况下，尽量使用非同步替代类，减少开销 Early classes of the Java API, such as Vector, Hashtable and StringBuffer, were synchronized to make them thread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread. It is better to use their new unsynchronized replacements: ArrayList or LinkedList instead of Vector Deque instead of Stack HashMap instead of Hashtable StringBuilder instead of StringBuffer规范总结","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"sonar","slug":"sonar","permalink":"http://yanhui2018.gitee.io/tags/sonar/"},{"name":"lint","slug":"lint","permalink":"http://yanhui2018.gitee.io/tags/lint/"}]},{"title":"Lombok","slug":"java/Lombok","date":"2020-05-25T09:03:15.366Z","updated":"2020-05-25T09:03:15.366Z","comments":true,"path":"2020/05/25/java/Lombok/","link":"","permalink":"http://yanhui2018.gitee.io/2020/05/25/java/Lombok/","excerpt":"","text":"提供了一组注解，用于消除java类中的大量样板代码，解放生产力 引入lombok&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;...&lt;/version&gt; &lt;/dependency&gt; 在IDEA中使用安装插件市场提供的lombok插件即可 image-20200525144558885 @Getter/@Setter自动添加get/set方法 源代码 package com.ccbft.antigoods.stock; import lombok.Getter; import lombok.Setter; @Getter @Setter public class Person { // 姓名 String name; // 性别 String sex; // 年纪 Integer age; // 工资 Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { String name; String sex; Integer age; Integer salary; public Person() { } public String getName() { return this.name; } public String getSex() { return this.sex; } public Integer getAge() { return this.age; } public Integer getSalary() { return this.salary; } public void setName(final String name) { this.name = name; } public void setSex(final String sex) { this.sex = sex; } public void setAge(final Integer age) { this.age = age; } public void setSalary(final Integer salary) { this.salary = salary; } } @ToString自动给当前类生成toString()方法 源代码 package com.ccbft.antigoods.stock; import lombok.ToString; @ToString public class Person { // 姓名 String name; // 性别 String sex; // 年纪 Integer age; // 工资 Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { String name; String sex; Integer age; Integer salary; public Person() { } public String toString() { return &quot;Person(name=&quot; + this.name + &quot;, sex=&quot; + this.sex + &quot;, age=&quot; + this.age + &quot;, salary=&quot; + this.salary + &quot;)&quot;; } } @EqualsAndHashCode覆盖默认的equals()和hashCode()方法 源代码 package com.ccbft.antigoods.stock; import lombok.EqualsAndHashCode; @EqualsAndHashCode public class Person { // 姓名 String name; // 性别 String sex; // 年纪 Integer age; // 工资 Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { String name; String sex; Integer age; Integer salary; public Person() { } public boolean equals(final Object o) { if (o == this) { return true; } else if (!(o instanceof Person)) { return false; } else { Person other = (Person)o; if (!other.canEqual(this)) { return false; } else { label59: { Object this$name = this.name; Object other$name = other.name; if (this$name == null) { if (other$name == null) { break label59; } } else if (this$name.equals(other$name)) { break label59; } return false; } Object this$sex = this.sex; Object other$sex = other.sex; if (this$sex == null) { if (other$sex != null) { return false; } } else if (!this$sex.equals(other$sex)) { return false; } Object this$age = this.age; Object other$age = other.age; if (this$age == null) { if (other$age != null) { return false; } } else if (!this$age.equals(other$age)) { return false; } Object this$salary = this.salary; Object other$salary = other.salary; if (this$salary == null) { if (other$salary != null) { return false; } } else if (!this$salary.equals(other$salary)) { return false; } return true; } } } protected boolean canEqual(final Object other) { return other instanceof Person; } public int hashCode() { int PRIME = true; int result = 1; Object $name = this.name; int result = result * 59 + ($name == null ? 43 : $name.hashCode()); Object $sex = this.sex; result = result * 59 + ($sex == null ? 43 : $sex.hashCode()); Object $age = this.age; result = result * 59 + ($age == null ? 43 : $age.hashCode()); Object $salary = this.salary; result = result * 59 + ($salary == null ? 43 : $salary.hashCode()); return result; } } @AllArgsConstructor生成带所有字段的构造函数 源代码 package com.ccbft.antigoods.stock; import lombok.AllArgsConstructor; @AllArgsConstructor public class Person { // 姓名 private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { private String name; private String sex; private Integer age; private Integer salary; public Person(final String name, final String sex, final Integer age, final Integer salary) { this.name = name; this.sex = sex; this.age = age; this.salary = salary; } } @NonNull作用于成员变量和方法参数，标识不能为空，否则抛出空指针异常 源代码 package com.ccbft.antigoods.stock; import lombok.AllArgsConstructor; import lombok.NonNull; @AllArgsConstructor public class Person { // 姓名 @NonNull private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import lombok.NonNull; public class Person { @NonNull private String name; private String sex; private Integer age; private Integer salary; public Person(@NonNull final String name, final String sex, final Integer age, final Integer salary) { if (name == null) { throw new NullPointerException(&quot;name&quot;); } else { this.name = name; this.sex = sex; this.age = age; this.salary = salary; } } } @RequiredArgsConstructor生成包含final修饰和@NonNull注解字段的构造函数 源代码 package com.ccbft.antigoods.stock; import lombok.NonNull; import lombok.RequiredArgsConstructor; @RequiredArgsConstructor public class Person { // 姓名 private final String name; // 性别 @NonNull private String sex; // 年纪 private Integer age; // 工资 private Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import lombok.NonNull; public class Person { private final String name; @NonNull private String sex; private Integer age; private Integer salary; public Person(final String name, @NonNull final String sex) { if (sex == null) { throw new NullPointerException(&quot;sex&quot;); } else { this.name = name; this.sex = sex; } } } @Data是以下注解功能的集合@ToString @EqualsAndHashCode @Getter @Setter @RequiredArgsConstructor 源代码 package com.ccbft.antigoods.stock; import lombok.Data; import lombok.NonNull; @Data public class Person { // 姓名 @NonNull private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import lombok.NonNull; public class Person { @NonNull private String name; private String sex; private Integer age; private Integer salary; public Person(@NonNull final String name) { if (name == null) { throw new NullPointerException(&quot;name&quot;); } else { this.name = name; } } private Person() { } @NonNull public String getName() { return this.name; } public String getSex() { return this.sex; } public Integer getAge() { return this.age; } public Integer getSalary() { return this.salary; } public void setName(@NonNull final String name) { if (name == null) { throw new NullPointerException(&quot;name&quot;); } else { this.name = name; } } public void setSex(final String sex) { this.sex = sex; } public void setAge(final Integer age) { this.age = age; } public void setSalary(final Integer salary) { this.salary = salary; } public boolean equals(final Object o) { if (o == this) { return true; } else if (!(o instanceof Person)) { return false; } else { Person other = (Person)o; if (!other.canEqual(this)) { return false; } else { label59: { Object this$name = this.getName(); Object other$name = other.getName(); if (this$name == null) { if (other$name == null) { break label59; } } else if (this$name.equals(other$name)) { break label59; } return false; } Object this$sex = this.getSex(); Object other$sex = other.getSex(); if (this$sex == null) { if (other$sex != null) { return false; } } else if (!this$sex.equals(other$sex)) { return false; } Object this$age = this.getAge(); Object other$age = other.getAge(); if (this$age == null) { if (other$age != null) { return false; } } else if (!this$age.equals(other$age)) { return false; } Object this$salary = this.getSalary(); Object other$salary = other.getSalary(); if (this$salary == null) { if (other$salary != null) { return false; } } else if (!this$salary.equals(other$salary)) { return false; } return true; } } } protected boolean canEqual(final Object other) { return other instanceof Person; } public int hashCode() { int PRIME = true; int result = 1; Object $name = this.getName(); int result = result * 59 + ($name == null ? 43 : $name.hashCode()); Object $sex = this.getSex(); result = result * 59 + ($sex == null ? 43 : $sex.hashCode()); Object $age = this.getAge(); result = result * 59 + ($age == null ? 43 : $age.hashCode()); Object $salary = this.getSalary(); result = result * 59 + ($salary == null ? 43 : $salary.hashCode()); return result; } public String toString() { return &quot;Person(name=&quot; + this.getName() + &quot;, sex=&quot; + this.getSex() + &quot;, age=&quot; + this.getAge() + &quot;, salary=&quot; + this.getSalary() + &quot;)&quot;; } } @Builder为当前类生成静态内部构造类，用于方便构造当前对象 源代码 package com.ccbft.antigoods.stock; import lombok.Builder; @Builder public class Person { // 姓名 private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; public static void main(String[] args) { Person person = Person.builder().name(&quot;yanhui&quot;).sex(&quot;M&quot;).age(19).build(); System.out.println(person); } } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { private String name; private String sex; private Integer age; private Integer salary; public static void main(String[] args) { Person person = builder().name(&quot;yanhui&quot;).sex(&quot;M&quot;).age(19).build(); System.out.println(person); } Person(final String name, final String sex, final Integer age, final Integer salary) { this.name = name; this.sex = sex; this.age = age; this.salary = salary; } public static Person.PersonBuilder builder() { return new Person.PersonBuilder(); } public static class PersonBuilder { private String name; private String sex; private Integer age; private Integer salary; PersonBuilder() { } public Person.PersonBuilder name(final String name) { this.name = name; return this; } public Person.PersonBuilder sex(final String sex) { this.sex = sex; return this; } public Person.PersonBuilder age(final Integer age) { this.age = age; return this; } public Person.PersonBuilder salary(final Integer salary) { this.salary = salary; return this; } public Person build() { return new Person(this.name, this.sex, this.age, this.salary); } public String toString() { return &quot;Person.PersonBuilder(name=&quot; + this.name + &quot;, sex=&quot; + this.sex + &quot;, age=&quot; + this.age + &quot;, salary=&quot; + this.salary + &quot;)&quot;; } } } @Slf4j生成Slf4j日志框架的静态日志变量，不同的日志框架有不同的注解 image-20200525164903531 源代码 package com.ccbft.antigoods.stock; import lombok.extern.slf4j.Slf4j; @Slf4j public class Person { // 姓名 private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; public static void main(String[] args) { log.info(&quot;slf4j log ...&quot;); } } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Person { private static final Logger log = LoggerFactory.getLogger(Person.class); private String name; private String sex; private Integer age; private Integer salary; public Person() { } public static void main(String[] args) { log.info(&quot;slf4j log ...&quot;); } } @Cleanup自动关闭资源对象，针对实现了 java.io.Closeable 接口的对象 源代码 package com.ccbft.antigoods.stock; import lombok.Cleanup; import java.io.IOException; import java.io.InputStream; import java.nio.file.Files; import java.nio.file.Paths; public class Person { public static void main(String[] args) throws IOException { @Cleanup InputStream inputStream = Files.newInputStream(Paths.get(&quot;/opt/1.txt&quot;)); byte[] bs = new byte[4096]; while (inputStream.read(bs) != -1) { // } } } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import java.io.IOException; import java.io.InputStream; import java.nio.file.Files; import java.nio.file.Paths; import java.util.Collections; public class Person { public Person() { } public static void main(String[] args) throws IOException { InputStream inputStream = Files.newInputStream(Paths.get(&quot;/opt/1.txt&quot;)); try { byte[] bs = new byte[4096]; while(true) { if (inputStream.read(bs) != -1) { continue; } } } finally { if (Collections.singletonList(inputStream).get(0) != null) { inputStream.close(); } } } }","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"lombok","slug":"lombok","permalink":"http://yanhui2018.gitee.io/tags/lombok/"}]},{"title":"windows操作技巧","slug":"other/windows操作技巧","date":"2020-05-13T00:52:42.887Z","updated":"2020-05-13T00:52:42.887Z","comments":true,"path":"2020/05/13/other/windows操作技巧/","link":"","permalink":"http://yanhui2018.gitee.io/2020/05/13/other/windows%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/","excerpt":"","text":"Win10实用快捷键 win + shift + s 截图 win + x 左下角弹出常用功能入口 win + tab 弹出桌面及活动预览，可增加虚拟桌面 虚拟桌面，隔离的工作空间 win + ctrl + d 创建虚拟桌面 win + ctrl + f4 关闭当前虚拟桌面 win + ctrl + ← 向左切换虚拟桌面 win + ctrl + → 向右切换虚拟桌面 win + i 弹出windows设置界面 win + a 打开操作中心，显示最近通知和常用功能开关按钮 win + s 打开搜索界面 win + v 打开云剪贴板 win + ; 打开自带的表情符号 谷歌浏览器信任自定义插件当使用自己开发的插件，或者非谷歌官方的插件时，会被浏览器限制；如果我们信任该插件，可以安装如下方式进行配置 打开本地组策略编辑器，运行gpedit.msc image-20200419172021567 添加模板，下载google浏览器自定义模板文件,https://yanhui2018.coding.net/s/854fa530-ea4e-4539-bfd7-216ea0e95d39 ；添加时选择 chrome.adm文件 image-20200419171708684 添加完成后可看到chrome模板，选择配置扩展安装白名单 image-20200419171824551 打开chrome扩展程序，找到扩展id，复制 image-20200419171849867 添加扩展id到白名单，保存后当前插件就会被chrome信任了，不会再有任何风险提示信息 image-20200419171910088","categories":[{"name":"other","slug":"other","permalink":"http://yanhui2018.gitee.io/categories/other/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://yanhui2018.gitee.io/tags/windows/"}]},{"title":"Centos7运维笔记","slug":"linux/Centos7运维笔记","date":"2020-05-11T10:11:51.151Z","updated":"2020-05-11T10:11:51.151Z","comments":true,"path":"2020/05/11/linux/Centos7运维笔记/","link":"","permalink":"http://yanhui2018.gitee.io/2020/05/11/linux/Centos7%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/","excerpt":"","text":"记录腾讯云Centos7服务器运维中的软件安装过程及问题 常用开发软件的简单应用 Linux常用命令文件目录cd 目录切换 cd .. 上级目录 cd ~ 当前用户目录，与直接 cd 效果一样 cd - 上次操作目录 mkdir test 新建目录 mv test test2 重命名目录 rm -rf test2 删除目录 cp -R test2 test3 复制test2目录生成test3目录 mkdir -p d1/d2/d3 创建多级目录 touch a.txt 创建文件 mv a.txt a2.txt 重命名文件 rm -rf a2.txt 删除文件 cat a.txt 查看文件内容 ls 查看当前目录下的文件 ls [options] [file...] ls /etc 查看目录 /etc 下的所有文件 -l 以列表形式查看文件 -a 查看所有文件，包含隐藏文件 -h 查看文件，文件大小友好展示（eg...1k,1m,1g） pwd 查看当前目录 -L 逻辑路径 -P 真实路径，可显示软链接的真实路径 ln 文件链接 ln [options] source [dest] 软链接：ln -s 目标文件/目录 链接名称 硬链接：ln 目标文件 链接文件 -d 目录硬链接 find文件查找 find /etc -name &quot;*.cnf&quot; 找出/etc目录下以.cnf结尾的文件 find /etc -ctime 1 找出近1天内文件状态发生改变的文件 find /etc -mtime 1 找出近1天内文件内容发生改变的文件 find /etc -size +10k 找出大于10k的文件 find /etc -size -10k 找出小于10k的文件 find /etc -empty 找空目录或者大小为0的文件 du 显示当前目录下的文件对磁盘空间的使用情况 du [options] [file...] -h 以友好的方式显示使用磁盘大小 du -h /etc 展示/etc目录下的文件磁盘使用情况 网络hostname 显示主机名 ping www.baidu.com 向目标机器发送数据包 -c 指定发送次数 ifconfig 查看网络配置，与 ip addr 类似 nslookup www.baidu.com 查看域名对应的ip地址 traceroute www.baidu.com 查看到达指定地址经过的路由ip和时间 系统free 查看内存使用情况 -m 以M为单位显示 systemctl系统服务管理，service和chkconfig两个命令的结合 systemctl start nginx.service 启动nginx服务 systemctl enable nginx.service 开机自动启动 systemctl disable nginx.service 关闭开机自动启动 systemctl status nginx.service 查看当前服务状态 systemctl restart nginx.service 重启服务 yum 软件管理命令 yum install nginx 安装软件 yum remove nginx 卸载软件 yum update nginx 更新软件 yum list 展示所有已安装或者可以安装的程序包 yum list installed 显示已安装的软件包 yum list available 显示可用的软件包 yum list httpd 显示httpd的安装情况 yum clean package 清除缓存目录下的软件包 yum search 软件名 在仓库中搜索软件 w 显示系统当前登录用户信息 磁盘df 显示磁盘上可使用的空间 -h 友好的方式展示磁盘大小 -a 展示全部的文件系统 Linux系统文件目录说明/etc/passwd用户信息，配置文件每一行表示一个用户信息，用“:”分隔用户信息 第一列为账户名称 第二列为密码占位符（x表示该账户需要密码才能登录，为空时，账户无须密码即可登录） 第三列为账户UID 第四列为GID 第五列为账户附加基本信息，一般存储账户名全称，联系方式等信息 第六列为账户家目录位置 第七列为账户登录Shell，/bin/bash为可登录系统Shell，/sbin/nologin表示账户无法登录系统 /etc/passwd /etc/shadow用户安全信息，与/etc/passwd中的用户行一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生 第一列为账户名称 第二列为密码（账户未设置密码时为!!，设置密码后加密显示） 如果格式为 &quot;$**id**$**salt**$**hashed**&quot;，则表示该用户密码正常。其中$id$的id表示密码的加密算法， $1$ 表示使用MD5算法 $2a$ 表示使用Blowfish算法 $2y$ 是另一算法长度的Blowfish, $5$ 表示SHA-256算法 $6$ 表示SHA-512算法 如下图,root用户使用的MD5算法，通过以上规则可以用 openssl 验证root密码, openssl passwd -1 &quot;root用户密码&quot; openssl passwd -1 -salt &quot;slat&quot; &quot;root用户密码&quot;，经验证，生成结果与密码列一致 第三列为上次修改密码的时间距离1970年01月01日多少天 第四列为密码最短有效天数，0表示无限制 第五列为密码最长有效天数（默认位99999天，可以理解为永不过期） 第六列为密码过期后的宽限天数（密码过期后，预留几天给账号修改密码，此时已无法使用旧密码登录） 第八列为账户失效日期（从1970年01月01日起多少天后账户失效） 第九列暂时保留未使用。 /etc/shadow 帮助文档man 自带帮助文档linux自带命令帮助文档工具 man ，输入 man ls 即可查看相关命令的帮助文档 image-20200509172351834 cman 中文帮助文档 安装：yum install man-pages-zh-CN 设置别名： alias cman=&#39;man -M /usr/share/man/zh_CN&#39; Mysql8安装下载wget -i -c https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm 安装 yum -y install mysql80-community-release-el7-3.noarch.rpm yum -y install mysql-community-server 下载加速官方下载速度很慢，慢到你崩溃加怀疑人生 0 此时你可以取消下载，打开 yum 下载缓存目录 /var/cache/yum/x86_64/7/mysql80-community/packages , 切换到该目录，不出意外的话，你可以看到刚刚没有下载完成的文件 image-1589016296791.png 通过以下国内镜像站点可以找到对应的文件 http://uni.mirrors.163.com/mysql/Downloads/MySQL-8.0/ http://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-8.0/ 找到对应的文件，复制下载地址 image-1589016307720.png 通过 wget 命令下载文件，然后覆盖掉原有文件即可 image-1589016311009.png 重新执行安装命令yum -y install mysql-community-server ，此时则会跳过下载，直接开始安装了。 image-1589016324992.png 运行 查看mysql服务状态：systemctl status mysqld 启动mysql服务：systemctl start mysqld 通过日志查看root密码：grep &quot;password&quot; /var/log/mysqld.log 登陆mysql， mysql -u root -p ，输入启动日志中的密码 image-1589016332459.png 重置密码 密码必须符合规则，暂且设置成带有大小写，数字，特殊字符的密码 ALTER USER &#39;root&#39;@&#39;[localhost](http://localhost)&#39; IDENTIFIED BY &#39;123456&#39;; {% image Centos7运维笔记/image-1589016335331.png 'image-1589016335331.png' '' %} 查看密码规则 SHOW VARIABLES LIKE &#39;validate_password%&#39;; image-1589016337796.png 设置简单密码，只满足长度最小为1即可 set global validate_password.policy=0; set global validate_password.length=1; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;; image-1589016341920.png 开启远程连接 直接给 root 用户赋远程访问权限会包语法错误，需要我们新增一个远程访问用户 CREATE USER ‘yanhui’@’%’ IDENTIFIED BY ‘926484’; GRANT ALL ON . TO ‘yanhui’@’%’; 客户端连接使用sqlyog连接时报错：plugin caching_sha2_password … image-1589016351856.png 此时需要修改默认的密码策略 ALTER USER &#39;yanhui&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;; 修改后再次测试，连接成功！！！ image-1589016355883.png 定时任务crontab安装使用centos7上的定时任务默认采用 crond.service 服务实现 服务安装 yum install crontabs 查看服务状态 systemctl status crond.service 查看当前定时任务列表 crontab -l 编辑定时任务 crontab -e ，新增一条定时任务记录 :wq 保持即可， image-1589016367754.png cron格式* * * * * command分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用 /1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 - 每天凌晨2点30执行脚本push.auto.sh 30 02 * * * cd /root/gitee/tcloud &amp;&amp; ./push.auto.sh &gt; /root/gitee/tcloud/crontab.log 2&gt;&amp;1 &amp;Redis安装配置Redis Key 命令 获取数据类型： type key 删除指定的key： del key 查询指定key是否存在： exists key1 key2 ... ，返回存在的数量，不存在则返回0 获取key的过期时间： ttl key ，以秒为单位返回过期时间 获取匹配指定模式的key： keys pattern ，例如 keys * ，查看所有key；keys abc* ，查询所有以abc开头的key 从数据库中随机返回一个key： random 移除key的过期时间： persits key ，移除后key将不会过期 修改key名称： rename key_name_old key_name_new 数据类型参考文档：https://www.redis.net.cn/order/ String 字符串 设置： set key value 设置多个key-value： set key1 value1 key2 value2 ... 设置值及过期时间： setex key seconds value ，以秒为单位设置过期时间； psetex 以毫秒为单位 获取： get key 获取多个key： mget key1 key2 key3 ... 返回key的旧值，并设置新值： getset key newValue 获取字符串长度： strlen key 字符串追加： append key ，如果key存在，则追加，不存在则与 set 命令功能一样 将存储的数字+1： incr key ，如果不是数字则会报错，如果不存在则默认为0，然后+1 将存储的数字+num： incrby key num 将存储的数字-1：decr key 将存储的数字减去指定数字num： decrby key num 获取key中字符串的子串： getrange key start end List 列表 在列表头部插入元素： lpush key value1 value2 ... 在列表尾部插入元素： rpush key value1 value2 ... 获取列表指定范围内的元素： lrange key start end 获取列表长度： llen key 通过索引获取列表元素： lindex key index ，index=0获取第一个元素，index=-1获取最后一个元素 通过索引设置元素的值： lset key index value 移除列表最后一个元素： rpop key 移除列表第一个元素： lpop key 移除列表元素： lrem key count value ，根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素 count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。 count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。 count = 0 : 移除表中所有与 value 相等的值 Hash 哈希表 设置单个field-value对到哈希表中 hset key field value 同时将多个 field-value (字段-值)对设置到哈希表中： hmset key field1 value1 field2 value2 ... 获取哈希表中指定field的值： hget key field 获取哈希表中所有field的value集合： hmget key field1 field2 ... 获取哈希表中所有field， hkeys key 获取哈希表中所有value， hvals key 获取表中的所有field-value： hgetall key 判断哈希表中field是否存在： hexists key field 删除哈希表中的字段： hdel key field1 field2 ... 获取哈希表中字段数量： hlen key Set 集合 向集合中添加元素， sadd key value1 value2 ... ，value重复则会被忽略 获取集合所有元素， smembers key 移除集合元素， srem key value1 value2 ... 将集合a的元素移动到集合b中， smove set1 set2 set1_value ，将set1中的set1_value移动到set2中 Zset 有序集合与 Set 类似，不重复的集合，但是保值有序，加入元素时会设置score值，越小排序越靠前 添加元素， zadd key score value 获取指定区间的元素（从小到大排序）， zrange key start end 获取指定区间的元素（从大到小排序）， zrevrange key start end 获取在指定score区间内的成员数量， zcount key min_score max_score 移除元素， zrem key value OpenResty安装源码下载 下载地址 https://openresty.org/download/openresty-1.15.8.2.tar.gz image-1589016374751.png 安装命令 tar -xzvf openresty-VERSION.tar.gz cd openresty-VERSION/ ./configure make sudo make install 配置configure执行命令：./configure 如果有缺失模块的问题，可执行以下命令安装： yum -y install pcre-devel yum -y install openssl openssl-devel 配置完成截图 image-1589016379063.png 编译make执行命令： make 安装make install执行命令： make install 安装完成 安装目录 /usr/local/openresty 启动： /usr/local/openresty/bin/openresty 大功告成 image-1589016391082.png 执行shell命令安装 sockproc# 安装sockproc git clone https://github.com/juce/sockproc.git cd sockproc/ gcc -o sockproc ./sockproc.c # 创建Unix套接字，提供给lua的shell库连接 ./sockproc /tmp/shell.sock chmod 0666 /tmp/shell.sock 安装 lua-resty-shellgit clone https://github.com/juce/lua-resty-shell # 复制库到openresty下 cp lua-resty-shell/lib/resty/shell.lua /usr/local/openresty/lualib/resty/ 修改nginx配置文件 vi /usr/local/openresty/nginx/conf/nginx.conf ，在 server 节点下加入如下内容： location /shell_test { content_by_lua_block { local shell = require(&quot;resty.shell&quot;) local args = { socket = &quot;unix:/tmp/shell.sock&quot;, } local status, out, err = shell.execute(&quot;uname -a&quot;, args) ngx.header.content_type = &quot;text/plain&quot; ngx.say(&quot;Hello from:\\n&quot; .. out) } } 重启 openresty - /usr/local/openresty/bin/openresty -s reload 访问地址 /shell_test","categories":[{"name":"linux","slug":"linux","permalink":"http://yanhui2018.gitee.io/categories/linux/"}],"tags":[{"name":"centos7","slug":"centos7","permalink":"http://yanhui2018.gitee.io/tags/centos7/"}]},{"title":"Java8-Stream流式操作集合","slug":"java/Java8-Stream流式操作集合","date":"2020-04-19T05:26:33.945Z","updated":"2020-04-19T05:26:33.945Z","comments":true,"path":"2020/04/19/java/Java8-Stream流式操作集合/","link":"","permalink":"http://yanhui2018.gitee.io/2020/04/19/java/Java8-Stream%E6%B5%81%E5%BC%8F%E6%93%8D%E4%BD%9C%E9%9B%86%E5%90%88/","excerpt":"","text":"利用java8提供的集合数据处理能力，快速完成日常工作中的分组，排序，过滤，求和，去重…… 测试类 Person.java 后面的测试都是以Person对象的集合处理展开 @Data @AllArgsConstructor @ToString class Person { // 姓名 String name; // 性别 String sex; // 年纪 Integer age; // 工资 Integer salary; } 循环List循环List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.forEach(System.out::println); 执行结果： Person(name=张三, sex=男, age=17, salary=1000) Person(name=李四, sex=男, age=25, salary=5000) Person(name=王五, sex=女, age=36, salary=3000) Person(name=赵六, sex=女, age=48, salary=7000) Person(name=多多, sex=男, age=100, salary=9000)Map循环Map&lt;String, List&lt;Person&gt;&gt; sexMap = new HashMap&lt;&gt;(); sexMap.put(&quot;男&quot;, Arrays.asList( new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000), new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000) )); sexMap.put(&quot;女&quot;, Arrays.asList( new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000), new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000) )); sexMap.forEach((key, value) -&gt; { System.out.println(key); System.out.println(value); }); 执行结果： 女 [Person(name=王五, sex=女, age=36, salary=3000), Person(name=赵六, sex=女, age=48, salary=7000)] 男 [Person(name=张三, sex=男, age=17, salary=1000), Person(name=李四, sex=男, age=25, salary=5000)]结果收集收集集合流中的所有人的姓名，拼接返回字符串 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;张三&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); String nameStr = personList.stream().map(Person::getName).collect(Collectors.joining(&quot;,&quot;)); System.out.println(nameStr); 执行结果： 张三,李四,王五,张三,多多,哈哈映射映射原始集合，结合collect方法生成新的集合 获取所有人的姓名集合 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); List&lt;String&gt; nameList = personList.stream().map(Person::getName).collect(Collectors.toList()); System.out.println(nameList); 执行结果： [张三, 李四, 王五, 赵六, 多多]过滤找出列表中满足条件元素 找出年龄大于30岁的人 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); List&lt;Person&gt; personListResult = personList.stream().filter(person -&gt; person.getAge() &gt; 30).collect(Collectors.toList()); System.out.println(personListResult); 执行结果： [Person(name=王五, sex=女, age=36, salary=3000), Person(name=赵六, sex=女, age=48, salary=7000), Person(name=多多, sex=男, age=100, salary=9000)]去重找出所有不重复的年龄 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); List&lt;Integer&gt; ages = personList.stream().map(Person::getAge).distinct().collect(Collectors.toList()); System.out.println(ages); 执行结果： [17, 36, 100]求和所有人的工资总和 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Integer salarySum = personList.stream().mapToInt(Person::getSalary).sum(); System.out.println(salarySum); 执行结果： 29000平均值找出36岁年龄人群的平均工资 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Double average = personList.stream().filter(person -&gt; person.age == 36).mapToInt(Person::getSalary).average().getAsDouble(); System.out.println(average); 执行结果： 4000.0最大值找出工资最高的人 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Person salaryMaxPerson = personList.stream().max(Comparator.comparingInt(Person::getSalary)).get(); System.out.println(salaryMaxPerson); 执行结果： Person(name=多多, sex=男, age=100, salary=9000)最小值List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Person salaryMaxPerson = personList.stream().min(Comparator.comparingInt(Person::getSalary)).get(); System.out.println(salaryMaxPerson); 执行结果： Person(name=张三, sex=男, age=17, salary=1000)分组根据对象中的指定名称进行分组，返回一个Map&lt;分组字段,对象集合&gt; 根据性别分组 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); Map&lt;String, List&lt;Person&gt;&gt; sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex)); System.out.println(sexMap); 执行结果： { 女=[Person(name=王五, sex=女, age=36, salary=3000), Person(name=赵六, sex=女, age=48, salary=7000)], 男=[Person(name=张三, sex=男, age=17, salary=1000), Person(name=李四, sex=男, age=25, salary=5000), Person(name=多多, sex=男, age=100, salary=9000)] }分组有序 默认分组后的map是无序的，如果要保证分组后原顺序不受影响，可参考如下代码 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); Map&lt;String, List&lt;Person&gt;&gt; sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex, LinkedHashMap::new, Collectors.toList())); System.out.println(sexMap); 执行结果： { 男=[ Person(name=张三, sex=男, age=17, salary=1000), Person(name=李四, sex=男, age=25, salary=5000), Person(name=多多, sex=男, age=100, salary=9000)], 女=[ Person(name=王五, sex=女, age=36, salary=3000), Person(name=赵六, sex=女, age=48, salary=7000)]}分组求和根据性别分组，然后求出男女的工资总和 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Map&lt;String, Integer&gt; salarySumMap = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.summingInt(Person::getSalary))); System.out.println(salarySumMap); 执行结果： {女=10000, 男=19000}分组求平均值根据性别分组，求出男女平均工资 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Map&lt;String, Double&gt; salarySumMap = personList.stream().collect( Collectors.groupingBy(Person::getSex, Collectors.averagingInt(Person::getSalary))); System.out.println(salarySumMap); 执行结果： {女=5000.0, 男=4750.0}排序顺序 根据年龄顺序排序 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 25, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 22, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList = personList.stream().sorted(Comparator.comparingInt(Person::getAge)).collect(Collectors.toList()); System.out.println(personList); 执行结果： [ Person(name=张三, sex=男, age=17, salary=1000), Person(name=赵六, sex=女, age=22, salary=7000), Person(name=王五, sex=女, age=25, salary=3000), Person(name=李四, sex=男, age=36, salary=5000), Person(name=多多, sex=男, age=100, salary=9000)]倒序 根据年龄倒序排序 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 25, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 22, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList = personList.stream().sorted(Comparator.comparingInt(Person::getAge).reversed()).collect(Collectors.toList()); System.out.println(personList); 执行结果： [ Person(name=多多, sex=男, age=100, salary=9000), Person(name=李四, sex=男, age=36, salary=5000), Person(name=王五, sex=女, age=25, salary=3000), Person(name=赵六, sex=女, age=22, salary=7000), Person(name=张三, sex=男, age=17, salary=1000)]多条件排序 根据年龄和工资进行排序 年龄相同，工资作为第二排序条件 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); personList = personList.stream().sorted( Comparator.comparingInt(Person::getAge).thenComparing(Person::getSalary) ).collect(Collectors.toList()); System.out.println(personList); 执行结果： [ Person(name=张三, sex=男, age=17, salary=1000), Person(name=赵六, sex=女, age=17, salary=7000), Person(name=王五, sex=女, age=36, salary=3000), Person(name=哈哈, sex=男, age=36, salary=4000), Person(name=李四, sex=男, age=36, salary=5000), Person(name=多多, sex=男, age=100, salary=9000)]","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"java8","slug":"java8","permalink":"http://yanhui2018.gitee.io/tags/java8/"}]}],"categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"},{"name":"other","slug":"other","permalink":"http://yanhui2018.gitee.io/categories/other/"},{"name":"linux","slug":"linux","permalink":"http://yanhui2018.gitee.io/categories/linux/"}],"tags":[{"name":"sonar","slug":"sonar","permalink":"http://yanhui2018.gitee.io/tags/sonar/"},{"name":"lint","slug":"lint","permalink":"http://yanhui2018.gitee.io/tags/lint/"},{"name":"lombok","slug":"lombok","permalink":"http://yanhui2018.gitee.io/tags/lombok/"},{"name":"windows","slug":"windows","permalink":"http://yanhui2018.gitee.io/tags/windows/"},{"name":"centos7","slug":"centos7","permalink":"http://yanhui2018.gitee.io/tags/centos7/"},{"name":"java8","slug":"java8","permalink":"http://yanhui2018.gitee.io/tags/java8/"}]}