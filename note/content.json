{"meta":{"title":"颜辉 ☆ JCoder","subtitle":"满招损，谦受益。 <br /> 愿你成为自己喜欢的模样，不抱怨，不将就，有自由，有光芒。","description":"","author":"颜辉","url":"http://yanhui2018.gitee.io","root":"/note/"},"pages":[{"title":"categories","date":"2020-04-18T05:55:35.000Z","updated":"2020-05-10T13:52:53.802Z","comments":false,"path":"categories/index.html","permalink":"http://yanhui2018.gitee.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-18T05:55:03.000Z","updated":"2020-05-10T14:17:16.280Z","comments":false,"path":"tags/index.html","permalink":"http://yanhui2018.gitee.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot单元测试","slug":"java/SpringBoot单元测试","date":"2020-06-11T16:00:00.000Z","updated":"2020-06-15T07:37:42.531Z","comments":true,"path":"2020/06/12/java/SpringBoot单元测试/","link":"","permalink":"http://yanhui2018.gitee.io/2020/06/12/java/SpringBoot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/","excerpt":"","text":"[TOC] 引入junit5 dependencies节点引入依赖 &lt;!--junit5--&gt; &lt;dependency&gt; &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt; &lt;version&gt;5.3.2&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;version&gt;5.3.2&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; build-&gt;plugins节点引入插件 &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.19&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.junit.platform&lt;/groupId&gt; &lt;artifactId&gt;junit-platform-surefire-provider&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; 集成测试 依赖完整的应用上下文 以HTTP请求为入口，测试整个交易流程 下面将会以一个库存分页查询的交易展开测试 交易描述 入库申请单的分页查询 针对该查询业务编写单元测试 image-20200612152059485 新建测试文件 在test文件夹下建对应的测试包，例如本交易所在包为com.ccbft.antigoods.stock.controller,则在测试文件夹下建对应的业务包com.ccbft.antigoods.stock和测试文件类GdsStockRequisitionControllerTest image-20200612153310731 在test文件夹建立对应的resources文件夹，用于存放测试需要的资源文件 image-20200615152559448 命名规范 针对每个单独的业务建立对应的测试包和测试资源文件夹，例如库存相关的业务都在stock包下，则针对库存的单元测试我们需要建立如下文件夹： test\\java\\com.ccbft.antigoods.stock，测试类文件所在包 test\\resources\\stock，资源文件所在位置（请求和预期的json文件，测试数据初始化脚本文件…） 一个Controller类或者一个Service类建立一个对应的测试类 一个测试类对应一个单独的资源文件夹，文件夹名与测试的控制器类名一致（首字母小写） image-20200615152145731 测试类命名必须符合如下格式：测试业务所在类+Test，例如我们需要测试GdsStockRequisitionController控制器相关的业务，则建立测试类GdsStockRequisitionControllerTest 每个测试方法都有对应的请求json（文件命名格式：测试方法名+Expected.json），预期响应json（文件命名格式：测试方法名+Request.json），数据初始化脚本（格式：测试方法名+Init.sql） image-20200615152825748 当一个业务请求(例如:分页查询listByPage)需要进行不同入参的测试时，则会有多个测试方法（不建议在一个测试方法里把多个场景的测试都包含进去，保证测试方法的任务单一），建议多个方法名以不同数字结尾区分(例如:listByPageTest1，listByPageTest2 …依此类推)，每个方法需要注释清楚参数区别和应用场景 测试类编写注解说明 @SpringBootTest 注解在测试类上 告诉spring基于测试环境运行 @AutoConfigureMockMvc 注解在测试类上 自动配置MockMvc，再测试类中直接注入 @Test 注解在测试方法上 标记一个单元测试方法，通常一个交易对应一个测试方法 结合MockMvc发起HTTP请求，验证响应内容，完成交易测试预期 @Transactional 注解在测试方法上 保证方法内的数据库操作在同一个事务中 整个测试方法完成后，默认会回滚事务，保证单元测试不污染数据 @SqlGroup 注解在测试方法上 定义一组sql文件，在方法执行前运行 @BeforeEach 与 @BeforeAll 注解在测试初始化相关的方法上 @Before 注解的方法在测试类的每个测试方法调用前都会执行一次 @BeforeClass 注解的方法在所有测试类方法执行前只会运行一次 @AfterEach 与 @AfterAll 注解在测试完成后相关的方法上 @AfterEach 每个测试方法调用完成后都会执行一次 @AfterAll 所有测试方法执行完成后运行一次 @Disabled 注解在禁用的测试方法上 让测试类运行在spring上下文给测试类添加如下注解： @SpringBootTest @ExtendWith(SpringExtension.class) public class GdsStockRequisitionControllerTest {} 初始化工作在进行测试前，我们需要做一些测试类的准备工作 mock对象构建 在测试类加入@AutoConfigureMockMvc注解 注入@Autowired private MockMvc mockMvc; 测试方法定义针对具体的交易编写对应的测试方法，例如我们编写分页查询申请单(listByPage)的测试方法，则新建如下方法 @Test @Transactional @SqlGroup({@Sql(&quot;classpath:stock/gdsStockRequisitionController/listByPageTestInit.sql&quot;)}) public void listByPageTest() throws Exception {} 我们做数据查询和删除时，都需要有初始化数据，可通过@SqlGroup注解在测试方法上定义 在SQL语句中插入数据时，请保证测试数据与实际数据的差异性 测试的数据虽然会在方法完成后会回滚，如果特殊情况出现数据污染，后面保证可以正常清理； 可通过id保证差异性：采用特殊命名的id，与实际规则生成的id不同 编写业务测试流程说明 获取定义的请求json文件内容 执行mockMvc发起http请求 解析http响应json 结果断言 判断HTTP响应码 对比响应json与预期json是否匹配 注意事项 每个HTTP请求都需要带上多租户标识，设置HTTP请求头MultiTenancyId 如果接口需要获取登录用户，可在http请求头中加入UserId报文头 请把http请求和预期的json统一定义在文件中，不要直接定义在java代码里 JSON匹配规则说明 字段类型必须完全匹配 如果期望一个数组，则数组长度必须匹配 预期的字符串和数字的值必须和实际匹配 非strict模式，JSONAssert.assertEquals()方法第三个参数为false， 响应对象属性包含预期定义的，也可包含多余的属性 预期空对象{}，返回{a:1,b:2}也合法 strict模式，JSONAssert.assertEquals()方法第三个参数为true， 响应对象属性只能包含预期定义的 预期空对象{}，返回{c:3}则不合法 完整代码 GdsStockRequisitionControllerTest.java package com.ccbft.antigoods.stock; import lombok.extern.slf4j.Slf4j; import org.apache.commons.io.FileUtils; import org.apache.http.HttpStatus; import org.junit.jupiter.api.AfterAll; import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.Assertions; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.skyscreamer.jsonassert.JSONAssert; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.context.jdbc.Sql; import org.springframework.test.context.jdbc.SqlGroup; import org.springframework.test.context.junit.jupiter.SpringExtension; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.MvcResult; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; import org.springframework.transaction.annotation.Transactional; import org.springframework.util.ResourceUtils; import java.nio.charset.StandardCharsets; /** * 库存入库申请单单元测试 * &lt;p&gt; * {@link com.ccbft.antigoods.stock.controller.GdsStockRequisitionController} */ @SpringBootTest @AutoConfigureMockMvc // 自动配置注入MockMvc @ExtendWith(SpringExtension.class) @Slf4j class GdsStockRequisitionControllerTest { @Autowired private MockMvc mockMvc; @BeforeAll static void beforeAll() { // 在当前类的所有测试方法运行前执行 } @AfterAll static void afterAll() { // 在当前类的所有测试方法运行完成后执行 } @BeforeEach void beforeEach() { // 每个测试方法运行之前执行 } @AfterEach void afterEach() { // 每个测试方法运行之后执行 } @Disabled @Test void noUseTest() { // 禁用该测试方法 } /** * 查询入库申请单测试 * * @throws Exception */ @Test @Transactional // 事务注解默认回滚所有操作，不论成功失败，防止单元测试对数据的污染 @SqlGroup({@Sql(&quot;classpath:stock/gdsStockRequisitionController/listByPageTestInit.sql&quot;)}) // 初始化申请单数据 void listByPageTest() throws Exception { String requestJson = FileUtils.readFileToString(ResourceUtils.getFile(&quot;classpath:stock/gdsStockRequisitionController/listByPageTestRequest.json&quot;), StandardCharsets.UTF_8.toString()); MvcResult result = mockMvc.perform( MockMvcRequestBuilders // 请求地址 .post(&quot;/stock/gds-stock-requisition/listByPage&quot;) // 请求的json内容 .content(requestJson) // 设置多租户标识 .header(&quot;MultiTenancyId&quot;, &quot;BJ001&quot;) // 设置登录用户ID .header(&quot;UserId&quot;, &quot;bj_admin1&quot;) .contentType(MediaType.APPLICATION_JSON_UTF8) ).andReturn(); String resultJson = result.getResponse().getContentAsString(); String expectedJson = FileUtils.readFileToString(ResourceUtils.getFile(&quot;classpath:stock/gdsStockRequisitionController/listByPageTestExpected.json&quot;), StandardCharsets.UTF_8.toString()); log.info(&quot;响应内容：{}&quot;, resultJson); log.info(&quot;预期内容：{}&quot;, expectedJson); Assertions.assertEquals(HttpStatus.SC_OK, result.getResponse().getStatus()); JSONAssert.assertEquals(expectedJson, resultJson, false); } } listByPageTestInit.sql 测试初始化脚本 INSERT INTO `gds_stock_requisition` VALUES (&#39;test_requisition_1&#39;, &#39;BJ001&#39;, &#39;0&#39;, &#39;0101&#39;, &#39;bj_admin&#39;, &#39;门头沟管理员&#39;, &#39;12345678901&#39;, &#39;2020-4-26 12:57:31&#39;, &#39;物资测试8个,&#39;, NULL, &#39;1&#39;, NULL); INSERT INTO `gds_stock_details` VALUES (&#39;test_details_1&#39;, &#39;BJ001&#39;, &#39;test_requisition_1&#39;, &#39;0&#39;, &#39;420100&#39;, &#39;武汉市&#39;, &#39;1&#39;, &#39;GCM0001&#39;, &#39;物资测试&#39;, &#39;0&#39;, NULL, &#39;个&#39;, 8, 8, &#39;2&#39;, &#39;2020-4-26 13:51:07&#39;, &#39;3&#39;, &#39;救灾物资&#39;, &#39;01&#39;, &#39;1&#39;, &#39;GdsStock_tobb7n21kq&#39;, NULL, NULL); listByPageTestRequest.json 模拟HTTP请求的json { &quot;requestEntity&quot;: { &quot;approvalStatusList&quot;: [ &quot;0&quot;, &quot;1&quot;, &quot;4&quot; ] }, &quot;requestHeader&quot;: { &quot;requestPagination&quot;: { &quot;pageNo&quot;: 1, &quot;pageSize&quot;: 10 } } } listByPageTestExpected.json 预期响应对比的json { &quot;code&quot;: &quot;0&quot; }","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"junit","slug":"junit","permalink":"http://yanhui2018.gitee.io/tags/junit/"},{"name":"springboot","slug":"springboot","permalink":"http://yanhui2018.gitee.io/tags/springboot/"}]},{"title":"Java文件操作","slug":"java/Java文件操作","date":"2020-06-10T16:00:00.000Z","updated":"2020-06-11T08:50:42.120Z","comments":true,"path":"2020/06/11/java/Java文件操作/","link":"","permalink":"http://yanhui2018.gitee.io/2020/06/11/java/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/","excerpt":"","text":"[TOC] 测试准备private Path fileHomePath; @Before public void before() { fileHomePath = Paths.get(&quot;d:/test&quot;); } 创建目录@Test public void createDir() throws IOException { Path path = Files.createDirectories(fileHomePath.resolve(String.format(&quot;dir%s&quot;, System.currentTimeMillis()))); System.out.println(String.format(&quot;目录%s创建成功&quot;, path)); } 创建文件@Test public void createFileOnPath() throws IOException { Path dirPath = Files.createDirectories(fileHomePath.resolve(String.format(&quot;dir%s&quot;, System.currentTimeMillis()))); Path filePath = Files.createFile(dirPath.resolve(&quot;test.txt&quot;)); System.out.println(String.format(&quot;文件%s创建成功&quot;, filePath)); } 创建文件并写入内容@Test public void createFile() throws IOException { Path filePath = fileHomePath.resolve(&quot;hello.txt&quot;); if (!Files.exists(filePath)) { // 文件不存在 Files.createFile(filePath); } // 向文件写入内容 File file = new File(filePath.toUri()); try (FileOutputStream fileOutputStream = new FileOutputStream(file);) { fileOutputStream.write(&quot;hello...&quot;.getBytes()); } } 向文件追加内容@Test public void writeFile() throws IOException { Path filePath = fileHomePath.resolve(&quot;hello.txt&quot;); Files.write( filePath, String.format(&quot;now:%s#&quot;, System.currentTimeMillis()).getBytes(), StandardOpenOption.APPEND, StandardOpenOption.CREATE); } 删除文件@Test public void deleteFile() throws IOException { Path filePath = fileHomePath.resolve(&quot;hello.txt&quot;); Files.deleteIfExists(filePath); } 遍历文件夹@Test public void list() throws IOException { try ( Stream&lt;Path&gt; pathStream = Files.list(fileHomePath) ) { pathStream.forEach(System.out::println); } } 递归遍历文件夹 递归遍历文件夹，找到匹配内容的文件 @Test public void findMatchFile() throws IOException { final String key = &quot;hello&quot;; try ( Stream&lt;Path&gt; pathStream = Files.find( fileHomePath, 10, (path, fileAttributes) -&gt; { if (Files.isDirectory(path)) return false; try { String txt = new String(Files.readAllBytes(path)); if (StringUtils.contains(txt, key)) { return true; } } catch (IOException e) { e.printStackTrace(); } return false; } ) ) { pathStream.forEach(System.out::println); } }","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"java8","slug":"java8","permalink":"http://yanhui2018.gitee.io/tags/java8/"},{"name":"files","slug":"files","permalink":"http://yanhui2018.gitee.io/tags/files/"}]},{"title":"Lombok","slug":"java/Lombok","date":"2020-06-09T16:00:00.000Z","updated":"2020-06-11T08:54:05.936Z","comments":true,"path":"2020/06/10/java/Lombok/","link":"","permalink":"http://yanhui2018.gitee.io/2020/06/10/java/Lombok/","excerpt":"","text":"提供了一组注解，用于消除java类中的大量样板代码，解放生产力 [TOC] 引入lombok&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;...&lt;/version&gt; &lt;/dependency&gt; 在IDEA中使用安装插件市场提供的lombok插件即可 image-20200525144558885 @Getter/@Setter自动添加get/set方法 源代码 package com.ccbft.antigoods.stock; import lombok.Getter; import lombok.Setter; @Getter @Setter public class Person { // 姓名 String name; // 性别 String sex; // 年纪 Integer age; // 工资 Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { String name; String sex; Integer age; Integer salary; public Person() { } public String getName() { return this.name; } public String getSex() { return this.sex; } public Integer getAge() { return this.age; } public Integer getSalary() { return this.salary; } public void setName(final String name) { this.name = name; } public void setSex(final String sex) { this.sex = sex; } public void setAge(final Integer age) { this.age = age; } public void setSalary(final Integer salary) { this.salary = salary; } } @ToString自动给当前类生成toString()方法 源代码 package com.ccbft.antigoods.stock; import lombok.ToString; @ToString public class Person { // 姓名 String name; // 性别 String sex; // 年纪 Integer age; // 工资 Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { String name; String sex; Integer age; Integer salary; public Person() { } public String toString() { return &quot;Person(name=&quot; + this.name + &quot;, sex=&quot; + this.sex + &quot;, age=&quot; + this.age + &quot;, salary=&quot; + this.salary + &quot;)&quot;; } } @EqualsAndHashCode覆盖默认的equals()和hashCode()方法 源代码 package com.ccbft.antigoods.stock; import lombok.EqualsAndHashCode; @EqualsAndHashCode public class Person { // 姓名 String name; // 性别 String sex; // 年纪 Integer age; // 工资 Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { String name; String sex; Integer age; Integer salary; public Person() { } public boolean equals(final Object o) { if (o == this) { return true; } else if (!(o instanceof Person)) { return false; } else { Person other = (Person)o; if (!other.canEqual(this)) { return false; } else { label59: { Object this$name = this.name; Object other$name = other.name; if (this$name == null) { if (other$name == null) { break label59; } } else if (this$name.equals(other$name)) { break label59; } return false; } Object this$sex = this.sex; Object other$sex = other.sex; if (this$sex == null) { if (other$sex != null) { return false; } } else if (!this$sex.equals(other$sex)) { return false; } Object this$age = this.age; Object other$age = other.age; if (this$age == null) { if (other$age != null) { return false; } } else if (!this$age.equals(other$age)) { return false; } Object this$salary = this.salary; Object other$salary = other.salary; if (this$salary == null) { if (other$salary != null) { return false; } } else if (!this$salary.equals(other$salary)) { return false; } return true; } } } protected boolean canEqual(final Object other) { return other instanceof Person; } public int hashCode() { int PRIME = true; int result = 1; Object $name = this.name; int result = result * 59 + ($name == null ? 43 : $name.hashCode()); Object $sex = this.sex; result = result * 59 + ($sex == null ? 43 : $sex.hashCode()); Object $age = this.age; result = result * 59 + ($age == null ? 43 : $age.hashCode()); Object $salary = this.salary; result = result * 59 + ($salary == null ? 43 : $salary.hashCode()); return result; } } @AllArgsConstructor生成带所有字段的构造函数 源代码 package com.ccbft.antigoods.stock; import lombok.AllArgsConstructor; @AllArgsConstructor public class Person { // 姓名 private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { private String name; private String sex; private Integer age; private Integer salary; public Person(final String name, final String sex, final Integer age, final Integer salary) { this.name = name; this.sex = sex; this.age = age; this.salary = salary; } } @NonNull作用于成员变量和方法参数，标识不能为空，否则抛出空指针异常 源代码 package com.ccbft.antigoods.stock; import lombok.AllArgsConstructor; import lombok.NonNull; @AllArgsConstructor public class Person { // 姓名 @NonNull private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import lombok.NonNull; public class Person { @NonNull private String name; private String sex; private Integer age; private Integer salary; public Person(@NonNull final String name, final String sex, final Integer age, final Integer salary) { if (name == null) { throw new NullPointerException(&quot;name&quot;); } else { this.name = name; this.sex = sex; this.age = age; this.salary = salary; } } } @RequiredArgsConstructor生成包含final修饰和@NonNull注解字段的构造函数 源代码 package com.ccbft.antigoods.stock; import lombok.NonNull; import lombok.RequiredArgsConstructor; @RequiredArgsConstructor public class Person { // 姓名 private final String name; // 性别 @NonNull private String sex; // 年纪 private Integer age; // 工资 private Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import lombok.NonNull; public class Person { private final String name; @NonNull private String sex; private Integer age; private Integer salary; public Person(final String name, @NonNull final String sex) { if (sex == null) { throw new NullPointerException(&quot;sex&quot;); } else { this.name = name; this.sex = sex; } } } @Data是以下注解功能的集合@ToString @EqualsAndHashCode @Getter @Setter @RequiredArgsConstructor 源代码 package com.ccbft.antigoods.stock; import lombok.Data; import lombok.NonNull; @Data public class Person { // 姓名 @NonNull private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import lombok.NonNull; public class Person { @NonNull private String name; private String sex; private Integer age; private Integer salary; public Person(@NonNull final String name) { if (name == null) { throw new NullPointerException(&quot;name&quot;); } else { this.name = name; } } private Person() { } @NonNull public String getName() { return this.name; } public String getSex() { return this.sex; } public Integer getAge() { return this.age; } public Integer getSalary() { return this.salary; } public void setName(@NonNull final String name) { if (name == null) { throw new NullPointerException(&quot;name&quot;); } else { this.name = name; } } public void setSex(final String sex) { this.sex = sex; } public void setAge(final Integer age) { this.age = age; } public void setSalary(final Integer salary) { this.salary = salary; } public boolean equals(final Object o) { if (o == this) { return true; } else if (!(o instanceof Person)) { return false; } else { Person other = (Person)o; if (!other.canEqual(this)) { return false; } else { label59: { Object this$name = this.getName(); Object other$name = other.getName(); if (this$name == null) { if (other$name == null) { break label59; } } else if (this$name.equals(other$name)) { break label59; } return false; } Object this$sex = this.getSex(); Object other$sex = other.getSex(); if (this$sex == null) { if (other$sex != null) { return false; } } else if (!this$sex.equals(other$sex)) { return false; } Object this$age = this.getAge(); Object other$age = other.getAge(); if (this$age == null) { if (other$age != null) { return false; } } else if (!this$age.equals(other$age)) { return false; } Object this$salary = this.getSalary(); Object other$salary = other.getSalary(); if (this$salary == null) { if (other$salary != null) { return false; } } else if (!this$salary.equals(other$salary)) { return false; } return true; } } } protected boolean canEqual(final Object other) { return other instanceof Person; } public int hashCode() { int PRIME = true; int result = 1; Object $name = this.getName(); int result = result * 59 + ($name == null ? 43 : $name.hashCode()); Object $sex = this.getSex(); result = result * 59 + ($sex == null ? 43 : $sex.hashCode()); Object $age = this.getAge(); result = result * 59 + ($age == null ? 43 : $age.hashCode()); Object $salary = this.getSalary(); result = result * 59 + ($salary == null ? 43 : $salary.hashCode()); return result; } public String toString() { return &quot;Person(name=&quot; + this.getName() + &quot;, sex=&quot; + this.getSex() + &quot;, age=&quot; + this.getAge() + &quot;, salary=&quot; + this.getSalary() + &quot;)&quot;; } } @Builder为当前类生成静态内部构造类，用于方便构造当前对象 源代码 package com.ccbft.antigoods.stock; import lombok.Builder; @Builder public class Person { // 姓名 private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; public static void main(String[] args) { Person person = Person.builder().name(&quot;yanhui&quot;).sex(&quot;M&quot;).age(19).build(); System.out.println(person); } } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; public class Person { private String name; private String sex; private Integer age; private Integer salary; public static void main(String[] args) { Person person = builder().name(&quot;yanhui&quot;).sex(&quot;M&quot;).age(19).build(); System.out.println(person); } Person(final String name, final String sex, final Integer age, final Integer salary) { this.name = name; this.sex = sex; this.age = age; this.salary = salary; } public static Person.PersonBuilder builder() { return new Person.PersonBuilder(); } public static class PersonBuilder { private String name; private String sex; private Integer age; private Integer salary; PersonBuilder() { } public Person.PersonBuilder name(final String name) { this.name = name; return this; } public Person.PersonBuilder sex(final String sex) { this.sex = sex; return this; } public Person.PersonBuilder age(final Integer age) { this.age = age; return this; } public Person.PersonBuilder salary(final Integer salary) { this.salary = salary; return this; } public Person build() { return new Person(this.name, this.sex, this.age, this.salary); } public String toString() { return &quot;Person.PersonBuilder(name=&quot; + this.name + &quot;, sex=&quot; + this.sex + &quot;, age=&quot; + this.age + &quot;, salary=&quot; + this.salary + &quot;)&quot;; } } } @Slf4j生成Slf4j日志框架的静态日志变量，不同的日志框架有不同的注解 image-20200525164903531 源代码 package com.ccbft.antigoods.stock; import lombok.extern.slf4j.Slf4j; @Slf4j public class Person { // 姓名 private String name; // 性别 private String sex; // 年纪 private Integer age; // 工资 private Integer salary; public static void main(String[] args) { log.info(&quot;slf4j log ...&quot;); } } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Person { private static final Logger log = LoggerFactory.getLogger(Person.class); private String name; private String sex; private Integer age; private Integer salary; public Person() { } public static void main(String[] args) { log.info(&quot;slf4j log ...&quot;); } } @Cleanup自动关闭资源对象，针对实现了 java.io.Closeable 接口的对象 源代码 package com.ccbft.antigoods.stock; import lombok.Cleanup; import java.io.IOException; import java.io.InputStream; import java.nio.file.Files; import java.nio.file.Paths; public class Person { public static void main(String[] args) throws IOException { @Cleanup InputStream inputStream = Files.newInputStream(Paths.get(&quot;/opt/1.txt&quot;)); byte[] bs = new byte[4096]; while (inputStream.read(bs) != -1) { // } } } 编译后 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by Fernflower decompiler) // package com.ccbft.antigoods.stock; import java.io.IOException; import java.io.InputStream; import java.nio.file.Files; import java.nio.file.Paths; import java.util.Collections; public class Person { public Person() { } public static void main(String[] args) throws IOException { InputStream inputStream = Files.newInputStream(Paths.get(&quot;/opt/1.txt&quot;)); try { byte[] bs = new byte[4096]; while(true) { if (inputStream.read(bs) != -1) { continue; } } } finally { if (Collections.singletonList(inputStream).get(0) != null) { inputStream.close(); } } } }","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"lombok","slug":"lombok","permalink":"http://yanhui2018.gitee.io/tags/lombok/"}]},{"title":"Maven","slug":"java/Maven","date":"2020-06-04T16:00:00.000Z","updated":"2020-06-11T08:54:05.936Z","comments":true,"path":"2020/06/05/java/Maven/","link":"","permalink":"http://yanhui2018.gitee.io/2020/06/05/java/Maven/","excerpt":"","text":"[TOC] 环境配置安装 下载apache-maven-version包解压 添加${maven-home}/bin到path环境变量 命令行执行mvn -version查看是否安装成功 image-20200528101133625 settings.xml配置文件 localRepository：配置本地仓库路径 servers：配置私服连接的用户名，密码 mirrors：配置仓库源，可配置多个源 proxies：设置maven网络连接的代理，在需要通过代理服务器上网的环境下使用 profiles：主要用于定义区分不同的环境，例如开发，测试，生产…等；与pom.xml文件中的profiles节点类似，如果和pom中存在相同的id，此处优先级更高 配置文件内容如下： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --&gt; &lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | | 1. User Level. This settings.xml file provides configuration for a single user, | and is normally provided in ${user.home}/.m2/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -s /path/to/user/settings.xml | | 2. Global Level. This settings.xml file provides configuration for all Maven | users on a machine (assuming they&#39;re all using the same Maven | installation). It&#39;s normally provided in | ${maven.conf}/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt; &lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: ${user.home}/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt; &lt;localRepository&gt;Z:/env/repos-noIdea&lt;/localRepository&gt; &lt;!-- interactiveMode | This will determine whether maven prompts you when it needs input. If set to false, | maven will use a sensible default value, perhaps based on some other setting, for | the parameter in question. | | Default: true &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; --&gt; &lt;!-- offline | Determines whether maven should attempt to connect to the network when executing a build. | This will have an effect on artifact downloads, artifact deployment, and others. | | Default: false &lt;offline&gt;false&lt;/offline&gt; --&gt; &lt;!-- pluginGroups | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e. | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list. |--&gt; &lt;pluginGroups&gt; &lt;!-- pluginGroup | Specifies a further group identifier to use for plugin lookup. &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt; --&gt; &lt;/pluginGroups&gt; &lt;!-- proxies | This is a list of proxies which can be used on this machine to connect to the network. | Unless otherwise specified (by system property or command-line switch), the first proxy | specification in this list marked as active will be used. |--&gt; &lt;proxies&gt; &lt;!-- proxy | Specification for one proxy, to be used in connecting to the network. | &lt;proxy&gt; &lt;id&gt;optional&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;username&gt;proxyuser&lt;/username&gt; &lt;password&gt;proxypass&lt;/password&gt; &lt;host&gt;proxy.host.net&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt; &lt;/proxy&gt; --&gt; &lt;/proxies&gt; &lt;!-- servers | This is a list of authentication profiles, keyed by the server-id used within the system. | Authentication profiles can be used whenever maven must make a connection to a remote server. |--&gt; &lt;servers&gt; &lt;!-- server | Specifies the authentication information to use when connecting to a particular server, identified by | a unique name within the system (referred to by the &#39;id&#39; attribute below). | | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are | used together. | &lt;server&gt; &lt;id&gt;deploymentRepo&lt;/id&gt; &lt;username&gt;repouser&lt;/username&gt; &lt;password&gt;repopwd&lt;/password&gt; &lt;/server&gt; --&gt; &lt;!-- Another sample, using keys to authenticate. &lt;server&gt; &lt;id&gt;siteServer&lt;/id&gt; &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt; &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt; &lt;/server&gt; --&gt; &lt;/servers&gt; &lt;!-- mirrors | This is a list of mirrors to be used in downloading artifacts from remote repositories. | | It works like this: a POM may declare a repository to use in resolving certain artifacts. | However, this repository may have problems with heavy traffic at times, so people have mirrored | it to several places. | | That repository definition will have a unique id, so we can create a mirror reference for that | repository, to be used as an alternate download site. The mirror site will be the preferred | server for that repository. |--&gt; &lt;mirrors&gt; &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | --&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;!-- profiles | This is a list of profiles which can be activated in a variety of ways, and which can modify | the build process. Profiles provided in the settings.xml are intended to provide local machine- | specific paths and repository locations which allow the build to work in the local environment. | | For example, if you have an integration testing plugin - like cactus - that needs to know where | your Tomcat instance is installed, you can provide a variable here such that the variable is | dereferenced during the build process to configure the cactus plugin. | | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles | section of this document (settings.xml) - will be discussed later. Another way essentially | relies on the detection of a system property, either matching a particular value for the property, | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a | value of &#39;1.4&#39; might activate a profile when the build is executed on a JDK version of &#39;1.4.2_07&#39;. | Finally, the list of active profiles can be specified directly from the command line. | | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact | repositories, plugin repositories, and free-form properties to be used as configuration | variables for plugins in the POM. | |--&gt; &lt;profiles&gt; &lt;!-- profile | Specifies a set of introductions to the build process, to be activated using one or more of the | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt; | or the command line, profiles have to have an ID that is unique. | | An encouraged best practice for profile identification is to use a consistent naming convention | for profiles, such as &#39;env-dev&#39;, &#39;env-test&#39;, &#39;env-production&#39;, &#39;user-jdcasey&#39;, &#39;user-brett&#39;, etc. | This will make it more intuitive to understand what the set of introduced profiles is attempting | to accomplish, particularly when you only have a list of profile id&#39;s for debug. | | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo. &lt;profile&gt; &lt;id&gt;jdk-1.4&lt;/id&gt; &lt;activation&gt; &lt;jdk&gt;1.4&lt;/jdk&gt; &lt;/activation&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;jdk14&lt;/id&gt; &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt; &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; --&gt; &lt;!-- | Here is another profile, activated by the system property &#39;target-env&#39; with a value of &#39;dev&#39;, | which provides a specific path to the Tomcat instance. To use this, your plugin configuration | might hypothetically look like: | | ... | &lt;plugin&gt; | &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt; | &lt;artifactId&gt;myplugin&lt;/artifactId&gt; | | &lt;configuration&gt; | &lt;tomcatLocation&gt;${tomcatPath}&lt;/tomcatLocation&gt; | &lt;/configuration&gt; | &lt;/plugin&gt; | ... | | NOTE: If you just wanted to inject this configuration whenever someone set &#39;target-env&#39; to | anything, you could just leave off the &lt;value/&gt; inside the activation-property. | &lt;profile&gt; &lt;id&gt;env-dev&lt;/id&gt; &lt;activation&gt; &lt;property&gt; &lt;name&gt;target-env&lt;/name&gt; &lt;value&gt;dev&lt;/value&gt; &lt;/property&gt; &lt;/activation&gt; &lt;properties&gt; &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt; &lt;/properties&gt; &lt;/profile&gt; --&gt; &lt;/profiles&gt; &lt;!-- activeProfiles | List of profiles that are active for all builds. | &lt;activeProfiles&gt; &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt; &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt; &lt;/activeProfiles&gt; --&gt; &lt;/settings&gt; POMmaven项目的核心是pom.xml 基本信息 modelVersion：maven模块的版本信息 groupId：组织标识，系统标识 artifactId：系统模块标识，子系统标识 version：版本信息 依赖dependencies 管理项目所有的依赖jar包 image-20200528105329881 依赖范围scope compile 编译期依赖，默认值，在编译、测试、运行期间都有效；例如spring-core包 test 测试期间有效；例如Junit包 provided 编译期、测试期有效，运行期间无效 runtime 测试和运行期间有效； system 依赖范围和provided 一样，需要通过systemPath指定本地依赖文件的路径；例如本地类库 子项目依赖管理dependencyManagement &lt;dependencyManagement&gt;节点主要用于集中统一管理依赖的版本 我们以spring-boot-starter-parent为例子，它则是通过spring-boot-dependencies这个pom来统一定义和管理依赖版本的，这样在子模块中就不用再关心相关依赖的版本问题了 image-20200528104943734 继承parent 统一管理项目下的多个模块，即聚合模块，每个子模块通过parent引用相同的父模块 统一管理模块的公共依赖，例如A,B模块都依赖mybatis.jar，如果要升级mybatis则需要修改A,B各模块的pom依赖；此时可以将依赖统一管理在父模块中，修改父模块的版本，子模块A,B的版本也就都修改了 构建管理build&lt;build&gt;标签描述了如何编译和打包项目，具体的工作是由其子节点&lt;plugins&gt;来完成的 生命周期Maven的生命周期主要是由各个插件来完成的，主要包含以下阶段 20190606100220896 IDEA编辑器的Maven窗口包含以下生命周期 mvn clean 清理编译的项目内容 mvn validate mvn compile 编译 mvn test 测试 mvn package 打包，生成jar/war包 mvn verify mvn install 将项目安装到本地仓库 mvn site mvn deploy 将项目包复制到远程仓库（私服） 仓库本地仓库 maven插件，项目需要的第三方依赖等下载后都会保存在本地仓库下，默认路径${user.home}/.m2/repository 执行mvn install命令后会将本地工程安装到本地仓库 中央仓库 由组织统一管理的开源仓库，开发者可推送上传自己代码，共享给其他人 https://mvnrepository.com/站点提供了中央仓库jar的检索 私服 用于管理公司私有的jar包 加快中央仓库jar包的访问速度，下载一次后，每次jar包下载后都会缓存在本地私服，下次则可以直接从私服获取 私服通常通过Nexus搭建 约定插件聚合将一个大的项目分成多个模块，然后通过&lt;modules&gt;&lt;/modules&gt;整合在一起","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://yanhui2018.gitee.io/tags/maven/"}]},{"title":"Python入门","slug":"other/Python入门","date":"2020-06-04T16:00:00.000Z","updated":"2020-06-11T08:54:05.938Z","comments":true,"path":"2020/06/05/other/Python入门/","link":"","permalink":"http://yanhui2018.gitee.io/2020/06/05/other/Python%E5%85%A5%E9%97%A8/","excerpt":"","text":"[toc] 准备工作下载 image-20200605094558959 安装 默认安装路径 C:\\Users\\yanhui\\AppData\\Local\\Programs\\Python\\Python38-32 配置环境变量Path，加入如下路径 C:\\Users\\yanhui\\AppData\\Local\\Programs\\Python\\Python38-32 C:\\Users\\yanhui\\AppData\\Local\\Programs\\Python\\Python38-32\\Scripts 查看版本 image-20200605140100270 包管理器pip Usage: pip &lt;command&gt; [options] Commands: install Install packages. download Download packages. uninstall Uninstall packages. freeze Output installed packages in requirements format. list List installed packages. show Show information about installed packages. check Verify installed packages have compatible dependencies. config Manage local and global configuration. search Search PyPI for packages. wheel Build wheels from your requirements. hash Compute hashes of package archives. completion A helper command used for command completion. debug Show information useful for debugging. help Show help for commands. 替换pip源为国内源 用户目录下新建pip文件夹，文件夹下新建pip.ini文件 pip.ini文件内容 [global] index-url = http://mirrors.aliyun.com/pypi/simple/ [install] trusted-host=mirrors.aliyun.com 查看应用是否成功 C:\\Users\\yanhui&gt;pip list Package Version ---------- ------- pip 19.2.3 setuptools 41.2.0 WARNING: The repository located at mirrors.aliyun.com is not a trusted or secure host and is being ignored. If this repository is available via HTTPS we recommend you use HTTPS instead, otherwise you may silence this warning and allow it anyway with &#39;--trusted-host mirrors.aliyun.com&#39;.","categories":[{"name":"other","slug":"other","permalink":"http://yanhui2018.gitee.io/categories/other/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yanhui2018.gitee.io/tags/python/"}]},{"title":"POI","slug":"java/POI","date":"2020-05-31T16:00:00.000Z","updated":"2020-06-11T08:54:05.936Z","comments":true,"path":"2020/06/01/java/POI/","link":"","permalink":"http://yanhui2018.gitee.io/2020/06/01/java/POI/","excerpt":"","text":"[TOC] Excel常用操作Junit测试环境private Path fileHomePath; @Before public void before() { fileHomePath = Paths.get(&quot;d:/test&quot;); } 生成excel文件@Test public void createExcel() throws IOException { Path filePath = fileHomePath.resolve(&quot;hello.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); firstRow.createCell(0).setCellValue(&quot;hello poi...&quot;); workbook.write(Files.newOutputStream(filePath)); } } 读取excel内容@Test public void readExcel() throws IOException { Path filePath = fileHomePath.resolve(&quot;hello.xlsx&quot;); if (Files.notExists(filePath)) { System.out.println(&quot;文件不存在&quot;); return; } try ( XSSFWorkbook workbook = new XSSFWorkbook(Files.newInputStream(filePath)); ) { Sheet sheet = workbook.getSheetAt(0); Row firstRow = sheet.getRow(0); String row0cell0Value = firstRow.getCell(0).getStringCellValue(); System.out.println(row0cell0Value); } } 合并行列 指定一个区域内行列的范围进行合并 image-20200609175031029 @Test public void mergedCell() throws IOException { Path filePath = fileHomePath.resolve(&quot;mergedCell.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); firstRow.createCell(0).setCellValue(&quot;hello poi...&quot;); /** * 合并第一行的1-7列 */ CellRangeAddress region = new CellRangeAddress(0, 0, 0, 6); sheet.addMergedRegion(region); workbook.write(Files.newOutputStream(filePath)); } } 行高@Test public void setRowHeight() throws IOException { Path filePath = fileHomePath.resolve(&quot;setRowHeight.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); firstRow.createCell(0).setCellValue(&quot;hello poi...&quot;); // 设置行高 firstRow.setHeightInPoints(100); workbook.write(Files.newOutputStream(filePath)); } } 列宽 列宽的单位为1个英文字符长度的1/256 image-20200609174925379 @Test public void setColumnWidth() throws IOException { Path filePath = fileHomePath.resolve(&quot;setColumnWidth.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); firstRow.createCell(0).setCellValue(&quot;本列宽20个字符长度...&quot;); sheet.createRow(1).createCell(0).setCellValue(&quot;zxcvbnmasdfghjklqwer&quot;); /** * 宽度单位为1个英文字符宽度的1/256，如下设置20个英文字符的宽度 */ sheet.setColumnWidth(0, 256 * 20); workbook.write(Files.newOutputStream(filePath)); } } 文字对齐 支持文字在水平方向和垂直方向的对齐方式 image-20200609174825485 @Test public void setAlignment() throws IOException { Path filePath = fileHomePath.resolve(&quot;setAlignment.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); firstRow.createCell(0).setCellValue(&quot;hello poi...&quot;); firstRow.setHeightInPoints(100); // 创建列样式 CellStyle cellStyle = workbook.createCellStyle(); // 水平居中 cellStyle.setAlignment(HorizontalAlignment.CENTER); // 垂直居中 cellStyle.setVerticalAlignment(VerticalAlignment.CENTER); firstRow.getCell(0).setCellStyle(cellStyle); workbook.write(Files.newOutputStream(filePath)); } } 前景色，文字颜色 image-20200609174225578 @Test public void setCellColor() throws IOException { Path filePath = fileHomePath.resolve(&quot;setCellColor.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); firstRow.createCell(0).setCellValue(&quot;前景填充色ORANGE...&quot;); firstRow.createCell(1).setCellValue(&quot;文字颜色RED...&quot;); firstRow.setHeightInPoints(100); // 设置前景填充色 CellStyle cellStyle = workbook.createCellStyle(); cellStyle.setFillForegroundColor(HSSFColor.HSSFColorPredefined.ORANGE.getIndex()); cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND); firstRow.getCell(0).setCellStyle(cellStyle); // 设置文字颜色 CellStyle cellStyle2 = workbook.createCellStyle(); Font font2 = workbook.createFont(); font2.setColor(HSSFColor.HSSFColorPredefined.RED.getIndex()); cellStyle2.setFont(font2); firstRow.getCell(1).setCellStyle(cellStyle2); workbook.write(Files.newOutputStream(filePath)); } } 设置部分文字的颜色 通过富文本RichTextString实现 image-20200609173917651 @Test public void setPartTextColor() throws IOException { Path filePath = fileHomePath.resolve(&quot;setPartTextColor.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); // 创建富文本 XSSFRichTextString richString = new XSSFRichTextString(&quot;Hello, World!&quot;); Font font = workbook.createFont(); font.setColor(HSSFColor.HSSFColorPredefined.RED.getIndex()); // 设置指定字符的字体 richString.applyFont(0, 5, font); firstRow.createCell(0).setCellValue(richString); workbook.write(Files.newOutputStream(filePath)); } } 文字自动换行 默认文字会在水平方向排列，溢出后隐藏 自动换行保证文字不会在水平方向隐藏，超过后自动换行 image-20200609174324600 @Test public void setTextWrapper() throws IOException { Path filePath = fileHomePath.resolve(&quot;setTextWrapper.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); firstRow.createCell(0).setCellValue(&quot;我会自动换行，不用担心...&quot;); firstRow.setHeightInPoints(100); // 设置文字自动换行，保证文字可见 CellStyle cellStyle = workbook.createCellStyle(); cellStyle.setWrapText(true); firstRow.getCell(0).setCellStyle(cellStyle); workbook.write(Files.newOutputStream(filePath)); } } 注释说明 注释框可自定义高度和宽度，单位为单元格默认的行高和列宽 XSSFClientAnchor构造函数的后四个参数决定了注释框的大小 image-20200609174502828 image-20200609174454675 @Test public void setComment() throws IOException { Path filePath = fileHomePath.resolve(&quot;setComment.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { Sheet sheet = workbook.createSheet(); Row firstRow = sheet.createRow(0); Cell cell = firstRow.createCell(0); cell.setCellValue(&quot;我有注释的喔...&quot;); firstRow.createCell(1).setCellValue(&quot;我也有注释的喔...&quot;); // 设置注释 Drawing drawing = sheet.createDrawingPatriarch(); ClientAnchor clientAnchor = new XSSFClientAnchor(0, 0, 0, 0, 0, 1, 0, 0); Comment comment = drawing.createCellComment(clientAnchor); comment.setString(new XSSFRichTextString(&quot;注释的内容在这里~~&quot;)); cell.setCellComment(comment); /** * * col2 - col1 决定了注释弹框的长度，差值为10则宽度为10列的宽度 * row2 - row1 决定了注释弹框的高度，差值为10则高度为10行的高度 * * dx1 dy1 dx2 dy2 不影响 * */ ClientAnchor clientAnchor2 = new XSSFClientAnchor(0, 0, 0, 0, 1, 1, 10, 10); Comment comment2 = drawing.createCellComment(clientAnchor2); comment2.setString(new XSSFRichTextString(&quot;注释的内容在这里2222~~&quot;)); firstRow.getCell(1).setCellComment(comment2); workbook.write(Files.newOutputStream(filePath)); } } 下拉列表 image-20200609174747084 少量下拉数据/** * 设置下拉列表，适用于少量数据的下拉列表，下拉列表字符总长度小于255 * &lt;p&gt; * 当下拉字符串长度超过 255 时， POI会报错, {@link org.apache.poi.ss.formula.ptg.StringPtg#StringPtg(String)} * * @throws IOException */ @Test public void setDropDownList() throws IOException { Path filePath = fileHomePath.resolve(&quot;setDropDownList.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { XSSFSheet sheet = workbook.createSheet(); String[] selectList = new String[]{&quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;}; // 设置下拉列表范围，第3列，1-101行 CellRangeAddressList regions = new CellRangeAddressList(0, 100, 2, 2); DataValidationHelper dataValidationHelper = new XSSFDataValidationHelper(sheet); // 在指定regions下设置下拉列表 DataValidationConstraint dataValidationConstraint = dataValidationHelper.createExplicitListConstraint(selectList); DataValidation dataValidation = dataValidationHelper.createValidation(dataValidationConstraint, regions); sheet.addValidationData(dataValidation); workbook.write(Files.newOutputStream(filePath)); } } 大量下拉数据 新建一个隐藏的表格，在隐藏表格中写入下拉数据，通过名称管理器(公式)关联隐藏表格的数据 通过名称空间创建数据验证常量 @Test public void setBigDropDownList() throws IOException { Path filePath = fileHomePath.resolve(&quot;setBigDropDownList.xlsx&quot;); if (Files.notExists(filePath)) { Files.createFile(filePath); } try ( XSSFWorkbook workbook = new XSSFWorkbook(); ) { XSSFSheet sheet = workbook.createSheet(); String[] selectList = new String[]{&quot;abc1&quot;, &quot;abc2&quot;, &quot;abc3&quot;}; // 生成隐藏表格 Sheet hiddenSheet = workbook.createSheet(&quot;hideSheet&quot;); workbook.setSheetHidden(workbook.getSheetIndex(hiddenSheet), true); // 循环设置隐藏表格的下拉数据 int rowIndex = 0; for (String value : selectList) { Row row = hiddenSheet.createRow(rowIndex++); Cell cell = row.createCell(0); cell.setCellValue(value); } // 创建名称管理器，名称管理器属于公式的一部分，主要用于引用数据，例如在A表格中引用B表格中某个位置的数据 Name namedCell = workbook.createName(); namedCell.setNameName(&quot;selectList_test&quot;);//设置名称空间名字 // 通过名称空间关联数据，关联hideSheet表格中A1到A3的数据，A3可通过下拉列表长度动态设置 namedCell.setRefersToFormula(&quot;hideSheet&quot; + &quot;!$A$1:$A$3&quot;); // 设置下拉列表应用范围，第3列，1-101行 CellRangeAddressList regions = new CellRangeAddressList(0, 100, 2, 2); DataValidationHelper dataValidationHelper = new XSSFDataValidationHelper(sheet); // 通过名称空间名字关联下拉数据 DataValidationConstraint dataValidationConstraint = dataValidationHelper.createFormulaListConstraint(&quot;selectList_test&quot;); DataValidation dataValidation = dataValidationHelper.createValidation(dataValidationConstraint, regions); sheet.addValidationData(dataValidation); workbook.write(Files.newOutputStream(filePath)); } }","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"poi","slug":"poi","permalink":"http://yanhui2018.gitee.io/tags/poi/"},{"name":"office","slug":"office","permalink":"http://yanhui2018.gitee.io/tags/office/"},{"name":"excel","slug":"excel","permalink":"http://yanhui2018.gitee.io/tags/excel/"}]},{"title":"SonarLint代码检查问题总结","slug":"java/SonarLint代码检查问题总结","date":"2020-05-19T16:00:00.000Z","updated":"2020-06-11T08:54:05.936Z","comments":true,"path":"2020/05/20/java/SonarLint代码检查问题总结/","link":"","permalink":"http://yanhui2018.gitee.io/2020/05/20/java/SonarLint%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/","excerpt":"","text":"[toc] IDEA安装sonar lint image-20200526110544840 执行检查 检查指定包下的问题，选中包，右键选择 SonarLint-&gt;Analyze with SonarLint（快捷键：Ctrl+Shift+S），分析完成后即可在SonarLint面板上看到问题列表 image-20200526110753666 检查单个文件类的问题，在打开文件窗口右键选择Analyze with SonarLint image-20200526111022430 常见问题弱类型 在有定义泛型的类和方法时，没有传类型 Raw types should not be used Generic types shouldn&#39;t be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking, and defers the catch of unsafe code to runtime.泛型对象定义方式不对 使用了错误的方式定义泛型，导致无法正确推倒泛型 错误方式，引用的参数类型一定要加，不然无法推断类型，构造对象的地方可以不加，使用new BaseResponse&lt;&gt;()即可 image-20200526141230418 正确方式 image-20200526141359450 资源对象没关闭 在使用完资源对象（实现了Closeable接口）后没有关闭 Resources should be closed Connections, streams, files, and other classes that implement the Closeable interface or its super-interface, AutoCloseable, needs to be closed after use. Further, that close call must be made in a finally block otherwise an exception could keep the call from being made. Preferably, when class implements AutoCloseable, resource should be created using &quot;try-with-resources&quot; pattern and will be closed automatically. Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it&#39;s on to their knees. JDK1.7后可使用 try(初始化资源对象){...}catch(){...}语法自动关闭资源 try( // 资源对象 FileWriter fw = new FileWriter(&quot;aa.txt&quot;) ) { fw.write(&quot;bbbbbbbbbbbbbb&quot;); } catch(Exception ex) { ex.printStackTrace(); } 未使用字符串常量 对多次重复出现的字符串没有统一定义常量 String literals should not be duplicated Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences. On the other hand, constants can be referenced from many places, but only need to be updated in a single place.未使用非同步替代类 在不需要保证同步和线程安全的情况下，尽量使用非同步替代类，减少开销 Early classes of the Java API, such as Vector, Hashtable and StringBuffer, were synchronized to make them thread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread. It is better to use their new unsynchronized replacements: ArrayList or LinkedList instead of Vector Deque instead of Stack HashMap instead of Hashtable StringBuilder instead of StringBuffer日志打印 出现多余的占位符，如下图，占位符{}多余 image-20200528155030182 记录日志使用字符串拼接，可使用占位符{}代替 image-20200528160323486 日志占位符参数多余调用toString()方法，占位符参数支持Object，不需要转换成String image-20200528160548776 使用e.printStackTrace()记录错误日志，使用log.error(&quot;错误描述&quot;, e)记录 image-20200528160838482 方法未重构 单个方法代码行数过多 代码层级结构比较复杂 没有注释 嵌套使用try-catch 如下图，内部try-catch和外部的处理一模一样，完全可以去掉 如果是为了捕获多个不同的业务异常，可以使用多个catch分支 image-20200528165402178 image-20200528165455089 数字包装类手动拆箱 包装类可直接进行数学运算，运算过程会自动拆箱，不需要手动拆箱再去运算 image-20200528165931140","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"sonar","slug":"sonar","permalink":"http://yanhui2018.gitee.io/tags/sonar/"},{"name":"lint","slug":"lint","permalink":"http://yanhui2018.gitee.io/tags/lint/"}]},{"title":"Java8-Stream流式操作集合","slug":"java/Java8-Stream流式操作集合","date":"2020-05-09T16:00:00.000Z","updated":"2020-06-11T08:54:05.935Z","comments":true,"path":"2020/05/10/java/Java8-Stream流式操作集合/","link":"","permalink":"http://yanhui2018.gitee.io/2020/05/10/java/Java8-Stream%E6%B5%81%E5%BC%8F%E6%93%8D%E4%BD%9C%E9%9B%86%E5%90%88/","excerpt":"","text":"利用java8提供的集合数据处理能力，快速完成日常工作中的分组，排序，过滤，求和，去重…… [TOC] 测试类 Person.java 后面的测试都是以Person对象的集合处理展开 @Data @AllArgsConstructor @ToString class Person { // 姓名 String name; // 性别 String sex; // 年纪 Integer age; // 工资 Integer salary; } 循环List循环List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.forEach(System.out::println); 执行结果： Person(name=张三, sex=男, age=17, salary=1000) Person(name=李四, sex=男, age=25, salary=5000) Person(name=王五, sex=女, age=36, salary=3000) Person(name=赵六, sex=女, age=48, salary=7000) Person(name=多多, sex=男, age=100, salary=9000)Map循环Map&lt;String, List&lt;Person&gt;&gt; sexMap = new HashMap&lt;&gt;(); sexMap.put(&quot;男&quot;, Arrays.asList( new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000), new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000) )); sexMap.put(&quot;女&quot;, Arrays.asList( new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000), new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000) )); sexMap.forEach((key, value) -&gt; { System.out.println(key); System.out.println(value); }); 执行结果： 女 [Person(name=王五, sex=女, age=36, salary=3000), Person(name=赵六, sex=女, age=48, salary=7000)] 男 [Person(name=张三, sex=男, age=17, salary=1000), Person(name=李四, sex=男, age=25, salary=5000)]结果收集收集集合流中的所有人的姓名，拼接返回字符串 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;张三&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); String nameStr = personList.stream().map(Person::getName).collect(Collectors.joining(&quot;,&quot;)); System.out.println(nameStr); 执行结果： 张三,李四,王五,张三,多多,哈哈映射映射原始集合，结合collect方法生成新的集合 获取所有人的姓名集合 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); List&lt;String&gt; nameList = personList.stream().map(Person::getName).collect(Collectors.toList()); System.out.println(nameList); 执行结果： [张三, 李四, 王五, 赵六, 多多]过滤找出列表中满足条件元素 找出年龄大于30岁的人 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); List&lt;Person&gt; personListResult = personList.stream().filter(person -&gt; person.getAge() &gt; 30).collect(Collectors.toList()); System.out.println(personListResult); 执行结果： [Person(name=王五, sex=女, age=36, salary=3000), Person(name=赵六, sex=女, age=48, salary=7000), Person(name=多多, sex=男, age=100, salary=9000)]去重找出所有不重复的年龄 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); List&lt;Integer&gt; ages = personList.stream().map(Person::getAge).distinct().collect(Collectors.toList()); System.out.println(ages); 执行结果： [17, 36, 100]分组根据对象中的指定名称进行分组，返回一个Map&lt;分组字段,对象集合&gt; 根据性别分组 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); Map&lt;String, List&lt;Person&gt;&gt; sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex)); System.out.println(sexMap); 执行结果： { 女=[Person(name=王五, sex=女, age=36, salary=3000), Person(name=赵六, sex=女, age=48, salary=7000)], 男=[Person(name=张三, sex=男, age=17, salary=1000), Person(name=李四, sex=男, age=25, salary=5000), Person(name=多多, sex=男, age=100, salary=9000)] }分组有序 默认分组后的map是无序的，如果要保证分组后原顺序不受影响，可参考如下代码 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 25, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 48, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); Map&lt;String, List&lt;Person&gt;&gt; sexMap = personList.stream().collect(Collectors.groupingBy(Person::getSex, LinkedHashMap::new, Collectors.toList())); System.out.println(sexMap); 执行结果： { 男=[ Person(name=张三, sex=男, age=17, salary=1000), Person(name=李四, sex=男, age=25, salary=5000), Person(name=多多, sex=男, age=100, salary=9000)], 女=[ Person(name=王五, sex=女, age=36, salary=3000), Person(name=赵六, sex=女, age=48, salary=7000)]}分组求和根据性别分组，然后求出男女的工资总和 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Map&lt;String, Integer&gt; salarySumMap = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.summingInt(Person::getSalary))); System.out.println(salarySumMap); 执行结果： {女=10000, 男=19000}分组求平均值根据性别分组，求出男女平均工资 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Map&lt;String, Double&gt; salarySumMap = personList.stream().collect( Collectors.groupingBy(Person::getSex, Collectors.averagingInt(Person::getSalary))); System.out.println(salarySumMap); 执行结果： {女=5000.0, 男=4750.0}排序顺序 根据年龄顺序排序 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 25, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 22, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList = personList.stream().sorted(Comparator.comparingInt(Person::getAge)).collect(Collectors.toList()); System.out.println(personList); 执行结果： [ Person(name=张三, sex=男, age=17, salary=1000), Person(name=赵六, sex=女, age=22, salary=7000), Person(name=王五, sex=女, age=25, salary=3000), Person(name=李四, sex=男, age=36, salary=5000), Person(name=多多, sex=男, age=100, salary=9000)]倒序 根据年龄倒序排序 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 25, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 22, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList = personList.stream().sorted(Comparator.comparingInt(Person::getAge).reversed()).collect(Collectors.toList()); System.out.println(personList); 执行结果： [ Person(name=多多, sex=男, age=100, salary=9000), Person(name=李四, sex=男, age=36, salary=5000), Person(name=王五, sex=女, age=25, salary=3000), Person(name=赵六, sex=女, age=22, salary=7000), Person(name=张三, sex=男, age=17, salary=1000)]多条件排序 根据年龄和工资进行排序 年龄相同，工资作为第二排序条件 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); personList = personList.stream().sorted( Comparator.comparingInt(Person::getAge).thenComparing(Person::getSalary) ).collect(Collectors.toList()); System.out.println(personList); 执行结果： [ Person(name=张三, sex=男, age=17, salary=1000), Person(name=赵六, sex=女, age=17, salary=7000), Person(name=王五, sex=女, age=36, salary=3000), Person(name=哈哈, sex=男, age=36, salary=4000), Person(name=李四, sex=男, age=36, salary=5000), Person(name=多多, sex=男, age=100, salary=9000)]求和所有人的工资总和 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Integer salarySum = personList.stream().mapToInt(Person::getSalary).sum(); System.out.println(salarySum); 执行结果： 29000平均值找出36岁年龄人群的平均工资 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Double average = personList.stream().filter(person -&gt; person.age == 36).mapToInt(Person::getSalary).average().getAsDouble(); System.out.println(average); 执行结果： 4000.0最大值找出工资最高的人 List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Person salaryMaxPerson = personList.stream().max(Comparator.comparingInt(Person::getSalary)).get(); System.out.println(salaryMaxPerson); 执行结果： Person(name=多多, sex=男, age=100, salary=9000)最小值List&lt;Person&gt; personList = new ArrayList&lt;&gt;(); personList.add(new Person(&quot;张三&quot;, &quot;男&quot;, 17, 1000)); personList.add(new Person(&quot;李四&quot;, &quot;男&quot;, 36, 5000)); personList.add(new Person(&quot;王五&quot;, &quot;女&quot;, 36, 3000)); personList.add(new Person(&quot;赵六&quot;, &quot;女&quot;, 17, 7000)); personList.add(new Person(&quot;多多&quot;, &quot;男&quot;, 100, 9000)); personList.add(new Person(&quot;哈哈&quot;, &quot;男&quot;, 36, 4000)); Person salaryMaxPerson = personList.stream().min(Comparator.comparingInt(Person::getSalary)).get(); System.out.println(salaryMaxPerson); 执行结果： Person(name=张三, sex=男, age=17, salary=1000)","categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"}],"tags":[{"name":"java8","slug":"java8","permalink":"http://yanhui2018.gitee.io/tags/java8/"}]},{"title":"windows操作技巧","slug":"other/windows操作技巧","date":"2020-05-04T16:00:00.000Z","updated":"2020-06-11T08:54:05.938Z","comments":true,"path":"2020/05/05/other/windows操作技巧/","link":"","permalink":"http://yanhui2018.gitee.io/2020/05/05/other/windows%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/","excerpt":"","text":"[toc] Win10实用快捷键 win + shift + s 截图 win + x 左下角弹出常用功能入口 win + tab 弹出桌面及活动预览，可增加虚拟桌面 虚拟桌面，隔离的工作空间 win + ctrl + d 创建虚拟桌面 win + ctrl + f4 关闭当前虚拟桌面 win + ctrl + ← 向左切换虚拟桌面 win + ctrl + → 向右切换虚拟桌面 win + i 弹出windows设置界面 win + a 打开操作中心，显示最近通知和常用功能开关按钮 win + s 打开搜索界面 win + v 打开云剪贴板 win + ; 打开自带的表情符号 谷歌浏览器信任自定义插件当使用自己开发的插件，或者非谷歌官方的插件时，会被浏览器限制；如果我们信任该插件，可以按照如下方式进行配置 打开本地组策略编辑器，运行gpedit.msc image-20200419172021567 添加模板，下载google浏览器自定义模板文件,https://yanhui2018.coding.net/s/854fa530-ea4e-4539-bfd7-216ea0e95d39 ；添加时选择 chrome.adm文件 image-20200419171708684 添加完成后可看到chrome模板，选择配置扩展安装白名单 image-20200419171824551 打开chrome扩展程序，找到扩展id，复制 image-20200419171849867 添加扩展id到白名单，保存后当前插件就会被chrome信任了，不会再有任何风险提示信息 image-20200419171910088","categories":[{"name":"other","slug":"other","permalink":"http://yanhui2018.gitee.io/categories/other/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://yanhui2018.gitee.io/tags/windows/"}]},{"title":"Centos7运维笔记","slug":"linux/Centos7运维笔记","date":"2020-04-30T16:00:00.000Z","updated":"2020-06-11T08:54:05.937Z","comments":true,"path":"2020/05/01/linux/Centos7运维笔记/","link":"","permalink":"http://yanhui2018.gitee.io/2020/05/01/linux/Centos7%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/","excerpt":"","text":"记录腾讯云Centos7服务器运维中的软件安装过程及问题 常用开发软件的简单应用 [toc] Linux常用命令文件目录cd 目录切换 cd .. 上级目录 cd ~ 当前用户目录，与直接 cd 效果一样 cd - 上次操作目录 mkdir test 新建目录 mv test test2 重命名目录 rm -rf test2 删除目录 cp -R test2 test3 复制test2目录生成test3目录 mkdir -p d1/d2/d3 创建多级目录 touch a.txt 创建文件 mv a.txt a2.txt 重命名文件 rm -rf a2.txt 删除文件 cat a.txt 查看文件内容 ls 查看当前目录下的文件 ls [options] [file...] ls /etc 查看目录 /etc 下的所有文件 -l 以列表形式查看文件 -a 查看所有文件，包含隐藏文件 -h 查看文件，文件大小友好展示（eg...1k,1m,1g） pwd 查看当前目录 -L 逻辑路径 -P 真实路径，可显示软链接的真实路径 ln 文件链接 ln [options] source [dest] 软链接：ln -s 目标文件/目录 链接名称 硬链接：ln 目标文件 链接文件 -d 目录硬链接 find文件查找 find /etc -name &quot;*.cnf&quot; 找出/etc目录下以.cnf结尾的文件 find /etc -ctime 1 找出近1天内文件状态发生改变的文件 find /etc -mtime 1 找出近1天内文件内容发生改变的文件 find /etc -size +10k 找出大于10k的文件 find /etc -size -10k 找出小于10k的文件 find /etc -empty 找空目录或者大小为0的文件 du 显示当前目录下的文件对磁盘空间的使用情况 du [options] [file...] -h 以友好的方式显示使用磁盘大小 du -h /etc 展示/etc目录下的文件磁盘使用情况 网络hostname 显示主机名 ping www.baidu.com 向目标机器发送数据包 -c 指定发送次数 ifconfig 查看网络配置，与 ip addr 类似 nslookup www.baidu.com 查看域名对应的ip地址 traceroute www.baidu.com 查看到达指定地址经过的路由ip和时间 系统free 查看内存使用情况 -m 以M为单位显示 systemctl系统服务管理，service和chkconfig两个命令的结合 systemctl start nginx.service 启动nginx服务 systemctl enable nginx.service 开机自动启动 systemctl disable nginx.service 关闭开机自动启动 systemctl status nginx.service 查看当前服务状态 systemctl restart nginx.service 重启服务 yum 软件管理命令 yum install nginx 安装软件 yum remove nginx 卸载软件 yum update nginx 更新软件 yum list 展示所有已安装或者可以安装的程序包 yum list installed 显示已安装的软件包 yum list available 显示可用的软件包 yum list httpd 显示httpd的安装情况 yum clean package 清除缓存目录下的软件包 yum search 软件名 在仓库中搜索软件 w 显示系统当前登录用户信息 磁盘df 显示磁盘上可使用的空间 -h 友好的方式展示磁盘大小 -a 展示全部的文件系统 Linux系统文件目录说明/etc/passwd用户信息，配置文件每一行表示一个用户信息，用“:”分隔用户信息 第一列为账户名称 第二列为密码占位符（x表示该账户需要密码才能登录，为空时，账户无须密码即可登录） 第三列为账户UID 第四列为GID 第五列为账户附加基本信息，一般存储账户名全称，联系方式等信息 第六列为账户家目录位置 第七列为账户登录Shell，/bin/bash为可登录系统Shell，/sbin/nologin表示账户无法登录系统 /etc/passwd /etc/shadow用户安全信息，与/etc/passwd中的用户行一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生 第一列为账户名称 第二列为密码（账户未设置密码时为!!，设置密码后加密显示） 如果格式为 &quot;$**id**$**salt**$**hashed**&quot;，则表示该用户密码正常。其中$id$的id表示密码的加密算法， $1$ 表示使用MD5算法 $2a$ 表示使用Blowfish算法 $2y$ 是另一算法长度的Blowfish, $5$ 表示SHA-256算法 $6$ 表示SHA-512算法 如下图,root用户使用的MD5算法，通过以上规则可以用 openssl 验证root密码, openssl passwd -1 &quot;root用户密码&quot; openssl passwd -1 -salt &quot;slat&quot; &quot;root用户密码&quot;，经验证，生成结果与密码列一致 第三列为上次修改密码的时间距离1970年01月01日多少天 第四列为密码最短有效天数，0表示无限制 第五列为密码最长有效天数（默认位99999天，可以理解为永不过期） 第六列为密码过期后的宽限天数（密码过期后，预留几天给账号修改密码，此时已无法使用旧密码登录） 第八列为账户失效日期（从1970年01月01日起多少天后账户失效） 第九列暂时保留未使用。 /etc/shadow 帮助文档man 自带帮助文档linux自带命令帮助文档工具 man ，输入 man ls 即可查看相关命令的帮助文档 image-20200509172351834 cman 中文帮助文档 安装：yum install man-pages-zh-CN 设置别名： alias cman=&#39;man -M /usr/share/man/zh_CN&#39; Mysql8安装下载wget -i -c https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm 安装 yum -y install mysql80-community-release-el7-3.noarch.rpm yum -y install mysql-community-server 下载加速官方下载速度很慢，慢到你崩溃加怀疑人生 0 此时你可以取消下载，打开 yum 下载缓存目录 /var/cache/yum/x86_64/7/mysql80-community/packages , 切换到该目录，不出意外的话，你可以看到刚刚没有下载完成的文件 image-1589016296791.png 通过以下国内镜像站点可以找到对应的文件 http://uni.mirrors.163.com/mysql/Downloads/MySQL-8.0/ http://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-8.0/ 找到对应的文件，复制下载地址 image-1589016307720.png 通过 wget 命令下载文件，然后覆盖掉原有文件即可 image-1589016311009.png 重新执行安装命令yum -y install mysql-community-server ，此时则会跳过下载，直接开始安装了。 image-1589016324992.png 运行 查看mysql服务状态：systemctl status mysqld 启动mysql服务：systemctl start mysqld 通过日志查看root密码：grep &quot;password&quot; /var/log/mysqld.log 登陆mysql， mysql -u root -p ，输入启动日志中的密码 image-1589016332459.png 重置密码 密码必须符合规则，暂且设置成带有大小写，数字，特殊字符的密码 ALTER USER &#39;root&#39;@&#39;[localhost](http://localhost)&#39; IDENTIFIED BY &#39;123456&#39;; {% image Centos7运维笔记/image-1589016335331.png 'image-1589016335331.png' '' %} 查看密码规则 SHOW VARIABLES LIKE &#39;validate_password%&#39;; image-1589016337796.png 设置简单密码，只满足长度最小为1即可 set global validate_password.policy=0; set global validate_password.length=1; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;; image-1589016341920.png 开启远程连接 直接给 root 用户赋远程访问权限会包语法错误，需要我们新增一个远程访问用户 CREATE USER ‘yanhui’@’%’ IDENTIFIED BY ‘926484’; GRANT ALL ON . TO ‘yanhui’@’%’; 客户端连接使用sqlyog连接时报错：plugin caching_sha2_password … image-1589016351856.png 此时需要修改默认的密码策略 ALTER USER &#39;yanhui&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;; 修改后再次测试，连接成功！！！ image-1589016355883.png 定时任务crontab安装使用centos7上的定时任务默认采用 crond.service 服务实现 服务安装 yum install crontabs 查看服务状态 systemctl status crond.service 查看当前定时任务列表 crontab -l 编辑定时任务 crontab -e ，新增一条定时任务记录 :wq 保持即可， image-1589016367754.png cron格式* * * * * command分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用 /1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 - 每天凌晨2点30执行脚本push.auto.sh 30 02 * * * cd /root/gitee/tcloud &amp;&amp; ./push.auto.sh &gt; /root/gitee/tcloud/crontab.log 2&gt;&amp;1 &amp;Redis安装配置Redis Key 命令 获取数据类型： type key 删除指定的key： del key 查询指定key是否存在： exists key1 key2 ... ，返回存在的数量，不存在则返回0 获取key的过期时间： ttl key ，以秒为单位返回过期时间 获取匹配指定模式的key： keys pattern ，例如 keys * ，查看所有key；keys abc* ，查询所有以abc开头的key 从数据库中随机返回一个key： random 移除key的过期时间： persits key ，移除后key将不会过期 修改key名称： rename key_name_old key_name_new 数据类型参考文档：https://www.redis.net.cn/order/ String 字符串 设置： set key value 设置多个key-value： set key1 value1 key2 value2 ... 设置值及过期时间： setex key seconds value ，以秒为单位设置过期时间； psetex 以毫秒为单位 获取： get key 获取多个key： mget key1 key2 key3 ... 返回key的旧值，并设置新值： getset key newValue 获取字符串长度： strlen key 字符串追加： append key ，如果key存在，则追加，不存在则与 set 命令功能一样 将存储的数字+1： incr key ，如果不是数字则会报错，如果不存在则默认为0，然后+1 将存储的数字+num： incrby key num 将存储的数字-1：decr key 将存储的数字减去指定数字num： decrby key num 获取key中字符串的子串： getrange key start end List 列表 在列表头部插入元素： lpush key value1 value2 ... 在列表尾部插入元素： rpush key value1 value2 ... 获取列表指定范围内的元素： lrange key start end 获取列表长度： llen key 通过索引获取列表元素： lindex key index ，index=0获取第一个元素，index=-1获取最后一个元素 通过索引设置元素的值： lset key index value 移除列表最后一个元素： rpop key 移除列表第一个元素： lpop key 移除列表元素： lrem key count value ，根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素 count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。 count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。 count = 0 : 移除表中所有与 value 相等的值 Hash 哈希表 设置单个field-value对到哈希表中 hset key field value 同时将多个 field-value (字段-值)对设置到哈希表中： hmset key field1 value1 field2 value2 ... 获取哈希表中指定field的值： hget key field 获取哈希表中所有field的value集合： hmget key field1 field2 ... 获取哈希表中所有field， hkeys key 获取哈希表中所有value， hvals key 获取表中的所有field-value： hgetall key 判断哈希表中field是否存在： hexists key field 删除哈希表中的字段： hdel key field1 field2 ... 获取哈希表中字段数量： hlen key Set 集合 向集合中添加元素， sadd key value1 value2 ... ，value重复则会被忽略 获取集合所有元素， smembers key 移除集合元素， srem key value1 value2 ... 将集合a的元素移动到集合b中， smove set1 set2 set1_value ，将set1中的set1_value移动到set2中 Zset 有序集合与 Set 类似，不重复的集合，但是保值有序，加入元素时会设置score值，越小排序越靠前 添加元素， zadd key score value 获取指定区间的元素（从小到大排序）， zrange key start end 获取指定区间的元素（从大到小排序）， zrevrange key start end 获取在指定score区间内的成员数量， zcount key min_score max_score 移除元素， zrem key value OpenResty安装源码下载 下载地址 https://openresty.org/download/openresty-1.15.8.2.tar.gz image-1589016374751.png 安装命令 tar -xzvf openresty-VERSION.tar.gz cd openresty-VERSION/ ./configure make sudo make install 配置configure执行命令：./configure 如果有缺失模块的问题，可执行以下命令安装： yum -y install pcre-devel yum -y install openssl openssl-devel 配置完成截图 image-1589016379063.png 编译make执行命令： make 安装make install执行命令： make install 安装完成 安装目录 /usr/local/openresty 启动： /usr/local/openresty/bin/openresty 大功告成 image-1589016391082.png 执行shell命令安装 sockproc# 安装sockproc git clone https://github.com/juce/sockproc.git cd sockproc/ gcc -o sockproc ./sockproc.c # 创建Unix套接字，提供给lua的shell库连接 ./sockproc /tmp/shell.sock chmod 0666 /tmp/shell.sock 安装 lua-resty-shellgit clone https://github.com/juce/lua-resty-shell # 复制库到openresty下 cp lua-resty-shell/lib/resty/shell.lua /usr/local/openresty/lualib/resty/ 修改nginx配置文件 vi /usr/local/openresty/nginx/conf/nginx.conf ，在 server 节点下加入如下内容： location /shell_test { content_by_lua_block { local shell = require(&quot;resty.shell&quot;) local args = { socket = &quot;unix:/tmp/shell.sock&quot;, } local status, out, err = shell.execute(&quot;uname -a&quot;, args) ngx.header.content_type = &quot;text/plain&quot; ngx.say(&quot;Hello from:\\n&quot; .. out) } } 重启 openresty - /usr/local/openresty/bin/openresty -s reload 访问地址 /shell_test","categories":[{"name":"linux","slug":"linux","permalink":"http://yanhui2018.gitee.io/categories/linux/"}],"tags":[{"name":"centos7","slug":"centos7","permalink":"http://yanhui2018.gitee.io/tags/centos7/"}]}],"categories":[{"name":"java","slug":"java","permalink":"http://yanhui2018.gitee.io/categories/java/"},{"name":"other","slug":"other","permalink":"http://yanhui2018.gitee.io/categories/other/"},{"name":"linux","slug":"linux","permalink":"http://yanhui2018.gitee.io/categories/linux/"}],"tags":[{"name":"junit","slug":"junit","permalink":"http://yanhui2018.gitee.io/tags/junit/"},{"name":"springboot","slug":"springboot","permalink":"http://yanhui2018.gitee.io/tags/springboot/"},{"name":"java8","slug":"java8","permalink":"http://yanhui2018.gitee.io/tags/java8/"},{"name":"files","slug":"files","permalink":"http://yanhui2018.gitee.io/tags/files/"},{"name":"lombok","slug":"lombok","permalink":"http://yanhui2018.gitee.io/tags/lombok/"},{"name":"maven","slug":"maven","permalink":"http://yanhui2018.gitee.io/tags/maven/"},{"name":"python","slug":"python","permalink":"http://yanhui2018.gitee.io/tags/python/"},{"name":"poi","slug":"poi","permalink":"http://yanhui2018.gitee.io/tags/poi/"},{"name":"office","slug":"office","permalink":"http://yanhui2018.gitee.io/tags/office/"},{"name":"excel","slug":"excel","permalink":"http://yanhui2018.gitee.io/tags/excel/"},{"name":"sonar","slug":"sonar","permalink":"http://yanhui2018.gitee.io/tags/sonar/"},{"name":"lint","slug":"lint","permalink":"http://yanhui2018.gitee.io/tags/lint/"},{"name":"windows","slug":"windows","permalink":"http://yanhui2018.gitee.io/tags/windows/"},{"name":"centos7","slug":"centos7","permalink":"http://yanhui2018.gitee.io/tags/centos7/"}]}